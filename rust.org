Notes from /The Rust Book/

* ownership
- Memory is managed through a system of ownership with a set of rules
  that the compiler checks at compile time. No run-time costs are
  incurred for any of the ownership features.
- Another property that makes the stack fast is that all data on the
  stack must take up a known, fixed size.

- Ownership
  1. Each value in Rust has a variable that’s called its owner.
  2. There can only be one owner at a time.
  3. When the owner goes out of scope, the value will be dropped.

- When a variable goes out of scope, Rust calls a special function for
  us. This function is called =drop=, and it’s where the author of String
  can put the code to return the memory. Rust calls =drop= automatically
  at the closing =}=

- Note: In C++, this pattern of deallocating resources at the end of
  an item’s lifetime is sometimes called Resource Acquisition Is
  Initialization (RAII). The drop function in Rust will be familiar to
  you if you’ve used RAII patterns.

- A String is made up of three parts, shown on the left: a pointer to
  the memory that holds the contents of the string, a length, and a
  capacity. This group of data is stored on the stack. The memory on
  the heap holds the contents. The length is how much memory, in bytes,
  the contents of the String is currently using. The capacity is the
  total amount of memory, in bytes, that the String has received from
  the operating system. The

  #+BEGIN_SRC rust
  let s1 = String::from("hello");
  let s2 = s1;
  #+END_SRC
  When we assign s1 to s2, the String data is copied, meaning we copy
  the pointer, the length, and the capacity that are on the stack. We do
  not copy the data on the heap that the pointer refers to.

  This is a problem: when s2 and s1 go out of scope, they will both try
  to free the same memory. This is known as a double free error and is
  one of the memory safety bugs we mentioned previously. Freeing memory
  twice can lead to memory corruption, which can potentially lead to
  security vulnerabilities.

- Ownership and Functions
  The semantics for passing a value to a function are similar to
  assigning a value to a variable. Passing a variable to a function will
  move or copy, just like assignment.
