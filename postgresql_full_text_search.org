
- Full text searching in PostgreSQL is based on the match operator
  ~@@~, which returns true if a ~tsvector~ (document) matches a ~tsquery~
  (query). It doesn't matter which data type is written first:
  #+BEGIN_SRC sql
    SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector @@ 'cat & rat'::tsquery;
    ?column?
    ----------
    t

    SELECT 'fat & cow'::tsquery @@ 'a fat cat sat on a mat and ate a fat rat'::tsvector;
    ?column?
    ----------
    f
  #+END_SRC
- As the above example suggests, a ~tsquery~ is not just raw text, any
  more than a ~tsvector~ is. A ~tsquery~ contains search terms, which must
  be already-normalized lexemes, and may combine multiple terms using
  AND, OR, NOT, and FOLLOWED BY operators.

- There are functions ~to_tsquery~, ~plainto_tsquery~, and
  ~phraseto_tsquery~ that are helpful in converting user-written text
  into a proper tsquery, primarily by normalizing words appearing in
  the text. Similarly, ~to_tsvector~ is used to parse and normalize a
  document string. So in practice a text search match would look more
  like this:
  #+BEGIN_SRC sql
    SELECT to_tsvector('fat cats ate fat rats') @@ to_tsquery('fat & rat');
    ?column?
    ----------
    t


    -- Observe that this match would not succeed if written as

    SELECT 'fat cats ate fat rats'::tsvector @@ to_tsquery('fat & rat');
    ?column?
    ----------
    f
  #+END_SRC
  since here no normalization of the word rats will occur. The
  elements of a tsvector are lexemes, which are assumed already
  normalized, so rats does not match rat.

- Within a ~tsquery~, the ~&~ (AND) operator specifies that both its
  arguments must appear in the document to have a match. Similarly,
  the ~|~ (OR) operator specifies that at least one of its arguments
  must appear, while the ~!~ (NOT) operator specifies that its
  argument must not appear in order to have a match. For example, the
  query ~fat & ! rat~ matches documents that contain fat but not rat.

- Searching for phrases is possible with the help of the ~<->~ (FOLLOWED
  BY) tsquery operator, which matches only if its arguments have
  matches that are adjacent and in the given order. For example:
  #+BEGIN_SRC sql
    SELECT to_tsvector('fatal error') @@ to_tsquery('fatal <-> error');
    ?column?
    ----------
    t

    SELECT to_tsvector('error is not fatal') @@ to_tsquery('fatal <-> error');
    ?column?
    ----------
    f
  #+END_SRC
- There is a more general version of the FOLLOWED BY operator having
  the form ~<N>~, where N is an integer standing for the difference
  between the positions of the matching lexemes. ~<1>~ is the same as
  ~<->~, while ~<2>~ allows exactly one other lexeme to appear between the
  matches, and so on. The ~phraseto_tsquery~ function makes use of this
  operator to construct a tsquery that can match a multi-word phrase
  when some of the words are stop words. For example:
  #+BEGIN_SRC sql
    SELECT phraseto_tsquery('cats ate rats');
           phraseto_tsquery
    -------------------------------
     'cat' <-> 'ate' <-> 'rat'


    SELECT phraseto_tsquery('the cats ate the rats');
           phraseto_tsquery
    -------------------------------
     'cat' <-> 'ate' <2> 'rat'
  #+END_SRC

** Searching a Table
- It is possible to do a full text search without an index. A simple
  query to print the title of each row that contains the word friend
  in its body field is:
  #+BEGIN_SRC sql
  SELECT title
  FROM pgweb
  WHERE to_tsvector('english', body) @@ to_tsquery('english', 'friend');
  #+END_SRC
  + This will also find related words such as friends and friendly,
    since all these are reduced to the same normalized lexeme.
  + The query above specifies that the english configuration is to be
    used to parse and normalize the strings. Alternatively we could
    omit the configuration parameters:
    #+BEGIN_SRC sql
      SELECT title
      FROM pgweb
      WHERE to_tsvector(body) @@ to_tsquery('friend');
    #+END_SRC
    - This query will use the configuration set by
      ~default_text_search_config~.
- A more complex example is to select the ten most recent documents
  that contain create and table in the title or body:
  #+BEGIN_SRC sql
    SELECT title
    FROM pgweb
    WHERE to_tsvector(title || ' ' || body) @@ to_tsquery('create & table')
    ORDER BY last_mod_date DESC
    LIMIT 10;
  #+END_SRC
  + For clarity we omitted the ~coalesce~ function calls which would be
    needed to find rows that contain NULL in one of the two fields.

*** Creating Indexes
- sample
  #+BEGIN_SRC sql
    CREATE TABLE mam_message(
      -- ...
      search_body text,
      indexed_search_body tsvector GENERATED ALWAYS AS (to_tsvector('english', coalesce(search_body, ''))) STORED,
      -- ...
    );

    CREATE INDEX i_mam_message_search_body_idx
        ON mam_message
        USING GIN (indexed_search_body);
  #+END_SRC

** Parsing Documents
