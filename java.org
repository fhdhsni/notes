* Eight primitive types

1) int
    | type  | storage requirement | range                                                   |
    |-------+---------------------+---------------------------------------------------------|
    | int   | 4 bytes             | ‚Äì2,147,483,648 to 2,147,483, 647 (just over 2 billion)  |
    | short | 2 bytes             | ‚Äì32,768 to 32,767                                       |
    | long  | 8 bytes             | ‚Äì9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 |
    | byte  | 1 byte              | ‚Äì128 to 127                                             |

    Note that Java does not have any unsigned versions of the int , long , short , or byte
    types.
5) float
    | Type   | Storage Requirement | Range                                                                   |
    |--------+---------------------+-------------------------------------------------------------------------|
    | float  | 4 bytes             | Approximately ¬±3.40282347E+38F (6‚Äì7 significant decimal digits)         |
    | double | 8 bytes             | Approximately ¬±1.79769313486231570E+308 (15 significant decimal digits) |
7) char
8) boolean

* char
Java was designed from the ground up to use 16-bit Unicode
characters. How they solved this issue when unicode grew beyond 65,536
characters?

** Code Point
 - A code point is a code value that is associated with a character in
   an encoding scheme. In the Unicode standard, code points are
   written in hexadecimal and prefixed with U+, such as U+0041 for the
   code point of the Latin letter A. Unicode has code points that are
   grouped into 17 code planes.  The first code plane, called the
   basic multilingual plane, consists of the ‚Äúclassic‚Äù Unicode
   characters with code points U+0000 to U+FFFF . Sixteen additional
   planes, with code points U+10000 to U+10FFFF , hold the
   supplementary characters.

* Bitwise Operators

-  & (bitwise AND)
-  | (bitwise OR)
-  ~ (bitwise NOT)
-  ^ (bitwise XOR)
-  << (bitwise left shift)
-  >> (bitwise right shift)
-  >>> (bitwise unsigned right shift)
-  &= (bitwise AND assignment)
-  |= (bitwise OR assignment)
-  ^= (bitwise XOR assignment)
-  <<= (bitwise left shift and assignment)
-  >>= (bitwise right shift and assignment)
-  >>>= (bitwise unsigned right shift and assignment)

* Parentheses and Operator Hierarchy

| Operators                                   | Associativity |
|---------------------------------------------+---------------|
| [] . () (method call)                       | Left to right |
| ! ~ ++ -- + (unary) - (unary) () (cast) new | Right to left |
| * / %                                       | Left to right |
| + -                                         | Left to right |
| << >> >>>                                   | Left to right |
| < <= > >= instanceof                        | Left to right |
| == !=                                       | Left to right |
| &                                           | Left to right |
| ^                                           | Left to right |
| «Ä                                           | Left to right |
| &&                                          | Left to right |
| ‚Äñ                                           | Left to right |
| ?:                                          | Right to left |
| = += -= *= /= %= &=  ^= <<= >>= >>>=        | Right to left |

e.g.

Since += associates right to left, the expression
#+BEGIN_SRC
a += b += c

#+END_SRC
means
#+BEGIN_SRC
a += (b += c)
#+END_SRC
That is, the value of b += c (which is the value of b after the addition) is added to a .
* Strings

Do not use the == operator to test whether two strings are equal! It
only determines whether or not the strings are stored in the same
location. Sure, if strings are in the same location, they must be
equal. But it is entirely possible to store multiple copies of
identical strings in different places.

** Code Points and Code Units

The =length= method yields the number of code units required for a given
string in the UTF-16 encoding

#+BEGIN_SRC
String greeting = "Hello";
int n = greeting.length(); // is 5.
#+END_SRC


To get the true length‚Äîthat is, the number of code points‚Äîcall
#+BEGIN_SRC
int cpCount = greeting.codePointCount(0, greeting.length());
#+END_SRC

The call =s.charAt(n)= returns the code unit at position n , where n
is between 0 and s.length() ‚Äì 1 . For example:

#+BEGIN_SRC
char first = greeting.charAt(0); // first is 'H'
char last = greeting.charAt(4); // last is 'o'
#+END_SRC

To get at the ith code point, use the statements

#+BEGIN_SRC
int index = greeting.offsetByCodePoints(0, i);
int cp = greeting.codePointAt(index);
#+END_SRC

Why are we making a fuss about code units? Consider the sentence

#+BEGIN_SRC
ü§∑ is the shrug emoji
#+END_SRC

The character (U+1F937) requires two code units in the UTF-16 encoding. Calling

#+BEGIN_SRC
char ch = sentence.charAt(1)
#+END_SRC

doesn‚Äôt return a space but the second code unit of ü§∑. To avoid this problem, you
should not use the char type. It is too low-level.
If your code traverses a string, and you want to look at each code point in turn,
you can use these statements:

#+BEGIN_SRC
int cp = sentence.codePointAt(i);
if (Character.isSupplementaryCodePoint(cp)) i += 2;
else i++;
#+END_SRC

You can move backwards with the following statements:
#+BEGIN_SRC
i--;
if (Character.isSurrogate(sentence.charAt(i))) i--;
int cp = sentence.codePointAt(i);
#+END_SRC

Obviously, that is quite painful. An easier way is to use the
codePoints method that yields a ‚Äústream‚Äù of int values, one for each
code point. You can just turn it into an array and traverse that.

#+BEGIN_SRC
int[] codePoints = str.codePoints().toArray();
#+END_SRC

Conversely, to turn an array of code points to a string, use a
constructor.

#+BEGIN_SRC
String str = new String(codePoints, 0, codePoints.length);
#+END_SRC
* Arrays
C++ NOTE: A Java array is quite different from a C++ array on the
stack. It is, however, essentially the same as a pointer to an array
allocated on the heap.  That is,
#+BEGIN_SRC
int[] a = new int[100]; // Java

#+END_SRC
is not the same as
#+BEGIN_SRC
int a[100]; // C++
#+END_SRC
but rather
#+BEGIN_SRC
int* a = new int[100]; // C++
#+END_SRC
In Java, the [] operator is predefined to perform bounds
checking. Furthermore, there is no pointer arithmetic‚Äîyou can‚Äôt
increment a to point to the next element in the array.

* OO in java
- A constructor has the same name as the class.
- A class can have more than one constructor.
- A constructor can take zero, one, or more parameters.
- A constructor has no return value.
- A constructor is always called with the new operator.
- Class-Based Access Privileges: a method can access the private data
  of all objects of its class
- Final Instance Fields: You can define an instance field as
  final. Such a field must be initialized when the object is
  constructed.The final modifier is particularly useful for fields
  whose type is primitive or an immutable class. (A class is immutable
  if none of its methods ever mutate its objects.  For example, the
  String class is immutable.). For mutable classes, the final modifier
  can be confusing. The final keyword merely means that the object
  reference stored in the variable will never again refer to a
  different object. But the object can be mutated:
** Static field
If you define a field as static, then there is only one such field per
class. In contrast, each object has its own copy of all instance
fields.

In some object-oriented programming languages, static fields are
called class fields. The term ‚Äústatic‚Äù is a meaningless holdover from
C++.
** Static Methods

Use static methods in two situations:

- When a method doesn‚Äôt need to access the object state because all
  needed parameters are supplied as explicit parameters (example:
  =Math.pow=).

- When a method only needs to access static fields of the class

** Call By copy of reference

Many programming languages (in particular, C++ and Pascal) have two
mecha- nisms for parameter passing: call by value and call by
reference. Some program- mers (and unfortunately even some book
authors) claim that Java uses call by reference for objects. That is
false. Java programming language does not use call by reference for
objects. Instead, object references are passed by value.

Here is a summary of what you can and cannot do with method parameters
in Java:

- A method cannot modify a parameter of a primitive type (that is,
  numbers or boolean values).
- A method can change the state of an object parameter.
- A method cannot make an object parameter refer to a new object.

** Overloading
Some classes have more than one constructor.

NOTE: Java allows you to overload any method‚Äînot just constructor
methods.  Thus, to completely describe a method, you need to specify
its name together with its parameter types. This is called the
signature of the method. For example, the String class has four public
methods called indexOf . They have signatures

=indexOf(int)=
=indexOf(int, int)=
=indexOf(String)=
=indexOf(String, int)=

The return type is not part of the method signature. That is, you
cannot have two meth

** Default Field Initialization

If you don‚Äôt set a field explicitly in a constructor, it is
automatically set to a default value: numbers to 0 , boolean values to
false , and object references to null.

NOTE: This is an important difference between fields and local
variables. You must always explicitly initialize local variables in a
method. But in a class, if you don‚Äôt initialize a field, it is
automatically initialized to a default (0 , false, or null).
