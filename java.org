* Eight primitive types

1) int
    | type  | storage requirement | range                                                   |
    |-------+---------------------+---------------------------------------------------------|
    | int   | 4 bytes             | ‚Äì2,147,483,648 to 2,147,483, 647 (just over 2 billion)  |
    | short | 2 bytes             | ‚Äì32,768 to 32,767                                       |
    | long  | 8 bytes             | ‚Äì9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 |
    | byte  | 1 byte              | ‚Äì128 to 127                                             |

    Note that Java does not have any unsigned versions of the int , long , short , or byte
    types.
5) float
    | Type   | Storage Requirement | Range                                                                   |
    |--------+---------------------+-------------------------------------------------------------------------|
    | float  | 4 bytes             | Approximately ¬±3.40282347E+38F (6‚Äì7 significant decimal digits)         |
    | double | 8 bytes             | Approximately ¬±1.79769313486231570E+308 (15 significant decimal digits) |
7) char
8) boolean

* char
Java was designed from the ground up to use 16-bit Unicode
characters. How they solved this issue when unicode grew beyond 65,536
characters?

** Code Point
 - A code point is a code value that is associated with a character in
   an encoding scheme. In the Unicode standard, code points are
   written in hexadecimal and prefixed with U+, such as U+0041 for the
   code point of the Latin letter A. Unicode has code points that are
   grouped into 17 code planes.  The first code plane, called the
   basic multilingual plane, consists of the ‚Äúclassic‚Äù Unicode
   characters with code points U+0000 to U+FFFF . Sixteen additional
   planes, with code points U+10000 to U+10FFFF , hold the
   supplementary characters.

* Bitwise Operators

-  & (bitwise AND)
-  | (bitwise OR)
-  ~ (bitwise NOT)
-  ^ (bitwise XOR)
-  << (bitwise left shift)
-  >> (bitwise right shift)
-  >>> (bitwise unsigned right shift)
-  &= (bitwise AND assignment)
-  |= (bitwise OR assignment)
-  ^= (bitwise XOR assignment)
-  <<= (bitwise left shift and assignment)
-  >>= (bitwise right shift and assignment)
-  >>>= (bitwise unsigned right shift and assignment)

* Parentheses and Operator Hierarchy

| Operators                                   | Associativity |
|---------------------------------------------+---------------|
| [] . () (method call)                       | Left to right |
| ! ~ ++ -- + (unary) - (unary) () (cast) new | Right to left |
| * / %                                       | Left to right |
| + -                                         | Left to right |
| << >> >>>                                   | Left to right |
| < <= > >= instanceof                        | Left to right |
| == !=                                       | Left to right |
| &                                           | Left to right |
| ^                                           | Left to right |
| «Ä                                           | Left to right |
| &&                                          | Left to right |
| ‚Äñ                                           | Left to right |
| ?:                                          | Right to left |
| = += -= *= /= %= &=  ^= <<= >>= >>>=        | Right to left |

e.g.

Since += associates right to left, the expression
#+BEGIN_SRC
a += b += c

#+END_SRC
means
#+BEGIN_SRC
a += (b += c)
#+END_SRC
That is, the value of b += c (which is the value of b after the addition) is added to a .
* Strings

Do not use the == operator to test whether two strings are equal! It
only determines whether or not the strings are stored in the same
location. Sure, if strings are in the same location, they must be
equal. But it is entirely possible to store multiple copies of
identical strings in different places.

** Code Points and Code Units

The =length= method yields the number of code units required for a given
string in the UTF-16 encoding

#+BEGIN_SRC java
String greeting = "Hello";
int n = greeting.length(); // is 5.
#+END_SRC


To get the true length‚Äîthat is, the number of code points‚Äîcall
#+BEGIN_SRC java
int cpCount = greeting.codePointCount(0, greeting.length());
#+END_SRC

The call =s.charAt(n)= returns the code unit at position n , where n
is between 0 and s.length() ‚Äì 1 . For example:

#+BEGIN_SRC java
char first = greeting.charAt(0); // first is 'H'
char last = greeting.charAt(4); // last is 'o'
#+END_SRC

To get at the ith code point, use the statements

#+BEGIN_SRC java
int index = greeting.offsetByCodePoints(0, i);
int cp = greeting.codePointAt(index);
#+END_SRC

Why are we making a fuss about code units? Consider the sentence

#+BEGIN_SRC
ü§∑ is the shrug emoji
#+END_SRC

The character (U+1F937) requires two code units in the UTF-16 encoding. Calling

#+BEGIN_SRC
char ch = sentence.charAt(1)
#+END_SRC

doesn‚Äôt return a space but the second code unit of ü§∑. To avoid this problem, you
should not use the char type. It is too low-level.
If your code traverses a string, and you want to look at each code point in turn,
you can use these statements:

#+BEGIN_SRC
int cp = sentence.codePointAt(i);
if (Character.isSupplementaryCodePoint(cp)) i += 2;
else i++;
#+END_SRC

You can move backwards with the following statements:
#+BEGIN_SRC
i--;
if (Character.isSurrogate(sentence.charAt(i))) i--;
int cp = sentence.codePointAt(i);
#+END_SRC

Obviously, that is quite painful. An easier way is to use the
codePoints method that yields a ‚Äústream‚Äù of int values, one for each
code point. You can just turn it into an array and traverse that.

#+BEGIN_SRC
int[] codePoints = str.codePoints().toArray();
#+END_SRC

Conversely, to turn an array of code points to a string, use a
constructor.

#+BEGIN_SRC
String str = new String(codePoints, 0, codePoints.length);
#+END_SRC
