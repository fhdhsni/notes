The =Providers= directory contains all of the service providers for your
application. Service providers bootstrap your application by binding
services in the service container, registering events, or performing
any other tasks to prepare your application for incoming requests.


** Architecture Concepts

the incoming request is sent to either the HTTP kernel or the console
kernel, depending on the type of request that is entering the
application. These two kernels serve as the central location that all
requests flow through.


*** Service Container

There is no need to bind classes into the container if they do not
depend on any interfaces. The container does not need to be instructed
on how to build these objects, since it can automatically resolve
these objects using reflection.


- Simple binding

#+BEGIN_SRC php
$this->app->bind('HelpSpot\API', function ($app) {
    return new HelpSpot\API($app->make('HttpClient'));
});
#+END_SRC


*** Facades
Facades provide a "static" interface to classes that are available in the application's service container.



All of Laravel's facades are defined in the =Illuminate\Support\Facades=
namespace. So, we can easily access a facade like so:

#+BEGIN_SRC php
use Illuminate\Support\Facades\Cache;

Route::get('/cache', function () {
    return Cache::get('key');
});
#+END_SRC

However, some care must be taken when using facades. The primary
danger of facades is class scope creep. Since facades are so easy to
use and do not require injection, it can be easy to let your classes
continue to grow and use many facades in a single class. Using
dependency injection, this potential is mitigated by the visual
feedback a large constructor gives you that your class is growing too
large. So, when using facades, pay special attention to the size of
your class so that its scope of responsibility stays narrow.


Typically, it would not be possible to mock or stub a truly static
class method. However, since facades use dynamic methods to proxy
method calls to objects resolved from the service container, we
actually can test facades just as we would test an injected class
instance. For example, given the following route:

#+BEGIN_SRC php
use Illuminate\Support\Facades\Cache;

Route::get('/cache', function () {
    return Cache::get('key');
});

#+END_SRC

We can write the following test to verify that the Cache::get method
was called with the argument we expected:

#+BEGIN_SRC php
use Illuminate\Support\Facades\Cache;

/**
 * A basic functional test example.
 *
 * @return void
 */
public function testBasicExample()
{
    Cache::shouldReceive('get')
         ->with('key')
         ->andReturn('value');

    $this->visit('/cache')
         ->see('value');
}
#+END_SRC


**** How Facades Work
In a Laravel application, a facade is a class that provides access to
an object from the container. The machinery that makes this work is in
the =Facade= class. Laravel's facades, and any custom facades you
create, will extend the base =Illuminate\Support\Facades\Facade= class.
