** viewport
  You specify the size of the viewport using the width and height
  attributes on the outermost <svg> element.

** The initial *viewport coordinate*
The initial viewport coordinate system is a coordinate system
established on the viewport, with the origin at the top left corner of
the viewport at point (0, 0).

** The initial *user coordinate system*
The initial user coordinate system is the coordinate system established on the SVG canvas. This coordinate system is initially identical to the viewport coordinate system—it has its origin at the top left corner of the viewport with the positive x-axis pointing towards the right, the positive y-axis pointing down. Using the viewBox attribute, the initial user coordinate system—also known as /the current coordinate system/, or /user space in use/ —can be modified so that it is not identical to the viewport coordinate system anymore.

** The viewBox
I like to think of the viewBox as the “real” coordinate system. After
all, it is the coordinate system used to draw the SVG graphics onto
the canvas. This coordinate system can be smaller or bigger than the
viewport, and it can be fully or partially visible inside the viewport
too.  You specify your own user coordinate system using the viewBox
attribute. If the user coordinate system you choose has the same
aspect ratio (ratio of height to width) as the viewport coordinate
system, it will stretch to fill the viewport area

=viewBox = <min-x> <min-y> <width> <height>=

So, what does viewbox="0 0 400 300" exactly do?

- It specifies a specific region of the canvas spanning from a top
  left point at (0, 0) to a point at (400, 300).
- The SVG graphic is then cropped to that region.
- The region is scaled up (in a zoom-in-like effect) to fill the
  entire viewport.
- The user coordinate system is mapped to the viewport coordinate
  system so that—in this case—one user unit is equal to two viewport
  units.

:ImportantNote:
*<min-x> and <min-y> uses new coordinate system to move around not the original*
:end:

** transform
1)  When an SVG element is *scaled*, its
    entire current coordinate system is scaled, resulting in the
    element also being repositioned inside the viewport.
2) Note that skewing an element may result in the element being repositioned inside the viewport.
3)

** SVG embeding technique
1) img
#+BEGIN_SRC html
  <img src="logo.svg" alt="Company logo"/>
#+END_SRC
or
#+BEGIN_SRC css
  .logo {
      background-color: url(logo.svg);
  }
#+END_SRC
   - Image can be cached (requires HTTP request) (in case of =background-image= it'll be cached alongside stylesheet)
   - Not CSS interactions.
   - No scripting.
   - CSS animations work only if defined inside <svg>
2) object tag
#+BEGIN_SRC html
  <style>
      #fallback {
          background-image: url(fallback.png);
      }
  </style>
  <object type="image/svg+xml" data="mySVG.svg">
    <div id="fallback"></div>
  </object>
  <script>
    window.onload = function () {
    const obj = document.querySelector("#obj");
    const content = obj.contentDocument;
    const fletter = content.getElementById("fLetter");
  };
  </script>

#+END_SRC
- Image can be cached
- Scripting (in my test it didn't work)
- Fallback mechanism
- CSS animations work only if defined inside <svg>
3) iframe
4) Data URIs

** Real-life SVG
- presentation attributes (e.g. fill="#009966") are overridden by any
  inline or external styles applied to an element — with the exception
  of inherited styles and user agent styles
#+BEGIN_SRC xml
  <svg height="200" width="200">
    <style>
      circle {
      fill: skyblue;
      }
    </style>
    <circle cx="100" cy="100" r="100" fill="orange"/>
  </svg>
#+END_SRC
circle will be skyblue

- the contents of the SVG cannot be selected and styled from the style
  sheet because the SVG is in another document and styles don’t apply
  across documents. This is also why SVGs referenced externally in any
  of the other previously mentioned embedding techniques cannot be
  styled using CSS from the main page.

*** sprites
1) SVG Icon System with Icons as Background Images
http://www.grumpicon.com/
- remeber to use correct path. path to css files should be relative to
  html file not grunticon.js loader and =./= at the beginning is not allowed.

- If you want to use different colors or sizes of the same icon,
  you’ll need to export a set of SVGs for each variation in order for
  Grumpicon to create matching fallback PNG images. (if fallback doesn't matter to you use =background-size=)
- Remember that the content of the page will not render before the CSS is parsed
2)

** =defs= and =use=

Define and use
#+BEGIN_SRC xml
  <!-- define -->
  <svg width="0" height="0">
    <defs>
      <g id="one"><path d="M91.928,67.838h-1.896V28.628c0-10.537-8.573-19.11-19.11-19.11s-19.109,8.573-19.109,19.11v40.459  c0,9.158-7.451,16.609-16.61,16.609c-9.159,0-16.61-7.451-16.61-16.609V29.329h5.232v-6.595h-0.128  c3.053-2.052,5.066-5.537,5.066-9.483V12h-6.853V7.375c0-0.69-0.56-1.25-1.25-1.25s-1.25,0.56-1.25,1.25V12h-5.463V7.375  c0-0.69-0.56-1.25-1.25-1.25s-1.25,0.56-1.25,1.25V12H5.921v1.25c0,3.947,2.014,7.432,5.066,9.483h-0.128v6.595h5.232v39.759  c0,10.537,8.573,19.109,19.11,19.109c10.538,0,19.11-8.572,19.11-19.109V28.628c0-9.159,7.451-16.61,16.609-16.61  c9.159,0,16.61,7.451,16.61,16.61v39.209h-2.372c-0.69,0-1.25,0.56-1.25,1.25v14.236c0,0.69,0.56,1.25,1.25,1.25h2.134v8.801  c0,0.69,0.56,1.25,1.25,1.25s1.25-0.56,1.25-1.25v-8.801h2.135c0.69,0,1.25-0.56,1.25-1.25V69.088  C93.178,68.397,92.618,67.838,91.928,67.838z M8.508,14.5h17.666c-0.61,4.329-4.338,7.67-8.833,7.67S9.118,18.829,8.508,14.5z   M13.359,25.233h7.964v1.595h-7.964V25.233z M90.678,82.074h-4.269V70.338h4.269V82.074z"/></g>
      <g id="two"><path d="M82.101,49.814C74.573,30.973,52.327,6.721,51.199,5.495c-0.618-0.662-1.779-0.662-2.397,0  C47.62,6.786,23.096,33.5,16.881,52.655c-0.911,2.788-1.432,5.423-1.432,7.788C15.449,79.5,30.949,95,49.995,95  c17.68,0,32.29-13.341,34.318-30.479c0.163-1.334,0.239-2.701,0.239-4.078C84.552,57.287,83.63,53.664,82.101,49.814z   M63.868,55.107c5.456-2.994,10.608-5.814,14.871-2.994c0.282,0.184,0.586,0.271,0.889,0.271c1.052,2.929,1.67,5.662,1.67,8.059  c0,0.889-0.033,1.768-0.119,2.636c-7.929,5.065-16.899,1.193-26.422-3.905C57.859,58.382,60.961,56.69,63.868,55.107z   M49.995,91.746c-17.257,0-31.292-14.035-31.292-31.303c0-1.909,0.39-4.046,1.096-6.313c7.744-4.805,16.508-1.161,25.771,3.775  c0.011,0.022,0.033,0.033,0.054,0.043c0.575,0.38,1.171,0.694,1.757,0.933c0.738,0.401,1.486,0.803,2.234,1.215  c7.788,4.263,15.76,8.623,23.428,8.623c2.549,0,5.065-0.477,7.527-1.605C77.524,81.182,64.974,91.746,49.995,91.746z"/></g>
      <g id="three"><path d="M57.593,27.196c-0.501,0-0.997,0.067-1.479,0.185c-1.361-3.36-3.592-6.27-6.408-8.468l2.572-5.627l3.269,1.495  c0.202,0.092,0.414,0.136,0.623,0.136c0.569,0,1.113-0.326,1.365-0.876c0.345-0.753,0.013-1.644-0.74-1.988l-4.627-2.116  c-0.002-0.001-0.003-0.002-0.005-0.003s-0.004-0.001-0.006-0.002l-4.629-2.117c-0.754-0.343-1.645-0.013-1.988,0.74  c-0.346,0.753-0.014,1.644,0.74,1.988l3.271,1.496l-2.37,5.183c-2.966-1.676-6.382-2.644-10.023-2.644h-10.31  c-3.643,0-7.058,0.968-10.024,2.643l-2.37-5.183l3.269-1.495c0.753-0.345,1.084-1.235,0.74-1.988  c-0.345-0.753-1.235-1.085-1.988-0.74l-9.267,4.238c-0.753,0.345-1.084,1.235-0.74,1.988c0.252,0.551,0.796,0.876,1.365,0.876  c0.208,0,0.421-0.044,0.623-0.136l3.269-1.495l2.574,5.627c-2.818,2.199-5.048,5.108-6.41,8.469  c-0.483-0.118-0.98-0.185-1.481-0.185c-3.44,0-6.239,2.799-6.239,6.239v4.028c0,3.44,2.799,6.239,6.239,6.239  c0.501,0,0.998-0.066,1.481-0.186c3.038,7.496,10.384,12.805,18.958,12.805h10.309c8.572,0,15.921-5.307,18.957-12.805  c0.484,0.117,0.979,0.186,1.48,0.186c3.44,0,6.24-2.799,6.24-6.239v-4.028C63.833,29.995,61.033,27.196,57.593,27.196z   M6.406,40.703c-1.786,0-3.239-1.453-3.239-3.239v-4.028c0-1.786,1.453-3.239,3.239-3.239c0.191,0,0.378,0.041,0.564,0.074  c-0.367,1.532-0.583,3.122-0.583,4.765v0.83c0,1.644,0.216,3.231,0.583,4.764C6.784,40.663,6.598,40.703,6.406,40.703z   M37.154,53.322H26.846c-9.626,0-17.458-7.832-17.458-17.457v-0.83c0-9.626,7.832-17.458,17.458-17.458h10.308  c9.627,0,17.459,7.832,17.459,17.458v0.83C54.611,45.491,46.779,53.322,37.154,53.322z M60.833,37.464  c0,1.786-1.453,3.239-3.24,3.239c-0.19,0-0.377-0.04-0.563-0.073c0.367-1.532,0.584-3.122,0.584-4.765v-0.83  c0-1.645-0.217-3.233-0.584-4.765c0.188-0.033,0.373-0.074,0.563-0.074c1.787,0,3.24,1.453,3.24,3.24V37.464z"/><path d="M24.008,25.695c-0.578-0.593-1.528-0.603-2.121-0.025l-1.33,1.298l-1.298-1.33c-0.579-0.593-1.529-0.603-2.121-0.025  c-0.593,0.579-0.604,1.528-0.025,2.121l1.299,1.33l-1.33,1.299c-0.593,0.579-0.604,1.528-0.025,2.121  c0.294,0.301,0.684,0.452,1.073,0.452c0.378,0,0.756-0.142,1.048-0.427l1.33-1.298l1.298,1.33c0.294,0.301,0.684,0.452,1.073,0.452  c0.378,0,0.756-0.142,1.048-0.427c0.593-0.579,0.604-1.528,0.025-2.121l-1.298-1.33l1.33-1.298  C24.575,27.238,24.586,26.288,24.008,25.695z"/><path d="M45.586,29.113l1.33-1.298c0.593-0.579,0.604-1.528,0.025-2.121s-1.528-0.604-2.121-0.025l-1.33,1.298l-1.298-1.33  c-0.578-0.593-1.527-0.603-2.121-0.025c-0.593,0.579-0.604,1.528-0.025,2.121l1.299,1.33l-1.33,1.298  c-0.593,0.579-0.604,1.528-0.025,2.121c0.294,0.301,0.684,0.453,1.073,0.453c0.378,0,0.756-0.143,1.048-0.428l1.329-1.298  l1.299,1.33c0.294,0.301,0.684,0.452,1.073,0.452c0.378,0,0.756-0.142,1.048-0.427c0.593-0.579,0.604-1.528,0.025-2.121  L45.586,29.113z"/><path d="M37.25,45.295h-10.5c-0.829,0-1.5-0.672-1.5-1.5s0.671-1.5,1.5-1.5h10.5c0.828,0,1.5,0.672,1.5,1.5  S38.078,45.295,37.25,45.295z"/></g>
    </defs>

  </svg>
  <!-- use -->
  <div>
    <svg viewBox="0 0 100 100">   <!-- viewBox is important to keep aspect ratio, so we need to use correct aspect ratio for each <g></g> -->
      <title>one</title>
      <use xlink:href="#one"></use>
    </svg>
  </div>
#+END_SRC

** =symbol=
SVG already knows not to draw =symbol= elements; it knows you are just defining them
to =use= (actually draw) later.

#+BEGIN_SRC xml
  <!-- define it, notice each symbol has its own viewBox -->
  <svg width="0" height="0">
    <symbol viewBox="0 0 100 100" id="one">
      <title>one</title>
      <path d="M91.928,67.838h-1.896V28.628c0-10.537-8.573-19.11-19.11-19.11s-19.109,8.573-19.109,19.11v40.459  c0,9.158-7.451,16.609-16.61,16.609c-9.159,0-16.61-7.451-16.61-16.609V29.329h5.232v-6.595h-0.128  c3.053-2.052,5.066-5.537,5.066-9.483V12h-6.853V7.375c0-0.69-0.56-1.25-1.25-1.25s-1.25,0.56-1.25,1.25V12h-5.463V7.375  c0-0.69-0.56-1.25-1.25-1.25s-1.25,0.56-1.25,1.25V12H5.921v1.25c0,3.947,2.014,7.432,5.066,9.483h-0.128v6.595h5.232v39.759  c0,10.537,8.573,19.109,19.11,19.109c10.538,0,19.11-8.572,19.11-19.109V28.628c0-9.159,7.451-16.61,16.609-16.61  c9.159,0,16.61,7.451,16.61,16.61v39.209h-2.372c-0.69,0-1.25,0.56-1.25,1.25v14.236c0,0.69,0.56,1.25,1.25,1.25h2.134v8.801  c0,0.69,0.56,1.25,1.25,1.25s1.25-0.56,1.25-1.25v-8.801h2.135c0.69,0,1.25-0.56,1.25-1.25V69.088  C93.178,68.397,92.618,67.838,91.928,67.838z M8.508,14.5h17.666c-0.61,4.329-4.338,7.67-8.833,7.67S9.118,18.829,8.508,14.5z   M13.359,25.233h7.964v1.595h-7.964V25.233z M90.678,82.074h-4.269V70.338h4.269V82.074z"/>
    </symbol>

    <symbol viewBox="0 0 100 125" id="two">
      <title>two</title>
      <path d="M82.101,49.814C74.573,30.973,52.327,6.721,51.199,5.495c-0.618-0.662-1.779-0.662-2.397,0  C47.62,6.786,23.096,33.5,16.881,52.655c-0.911,2.788-1.432,5.423-1.432,7.788C15.449,79.5,30.949,95,49.995,95  c17.68,0,32.29-13.341,34.318-30.479c0.163-1.334,0.239-2.701,0.239-4.078C84.552,57.287,83.63,53.664,82.101,49.814z   M63.868,55.107c5.456-2.994,10.608-5.814,14.871-2.994c0.282,0.184,0.586,0.271,0.889,0.271c1.052,2.929,1.67,5.662,1.67,8.059  c0,0.889-0.033,1.768-0.119,2.636c-7.929,5.065-16.899,1.193-26.422-3.905C57.859,58.382,60.961,56.69,63.868,55.107z   M49.995,91.746c-17.257,0-31.292-14.035-31.292-31.303c0-1.909,0.39-4.046,1.096-6.313c7.744-4.805,16.508-1.161,25.771,3.775  c0.011,0.022,0.033,0.033,0.054,0.043c0.575,0.38,1.171,0.694,1.757,0.933c0.738,0.401,1.486,0.803,2.234,1.215  c7.788,4.263,15.76,8.623,23.428,8.623c2.549,0,5.065-0.477,7.527-1.605C77.524,81.182,64.974,91.746,49.995,91.746z"/>
    </symbol>

    <symbol viewBox="0 0 64 80" id="three">
      <symbol>three</symbol>
      <path d="M57.593,27.196c-0.501,0-0.997,0.067-1.479,0.185c-1.361-3.36-3.592-6.27-6.408-8.468l2.572-5.627l3.269,1.495  c0.202,0.092,0.414,0.136,0.623,0.136c0.569,0,1.113-0.326,1.365-0.876c0.345-0.753,0.013-1.644-0.74-1.988l-4.627-2.116  c-0.002-0.001-0.003-0.002-0.005-0.003s-0.004-0.001-0.006-0.002l-4.629-2.117c-0.754-0.343-1.645-0.013-1.988,0.74  c-0.346,0.753-0.014,1.644,0.74,1.988l3.271,1.496l-2.37,5.183c-2.966-1.676-6.382-2.644-10.023-2.644h-10.31  c-3.643,0-7.058,0.968-10.024,2.643l-2.37-5.183l3.269-1.495c0.753-0.345,1.084-1.235,0.74-1.988  c-0.345-0.753-1.235-1.085-1.988-0.74l-9.267,4.238c-0.753,0.345-1.084,1.235-0.74,1.988c0.252,0.551,0.796,0.876,1.365,0.876  c0.208,0,0.421-0.044,0.623-0.136l3.269-1.495l2.574,5.627c-2.818,2.199-5.048,5.108-6.41,8.469  c-0.483-0.118-0.98-0.185-1.481-0.185c-3.44,0-6.239,2.799-6.239,6.239v4.028c0,3.44,2.799,6.239,6.239,6.239  c0.501,0,0.998-0.066,1.481-0.186c3.038,7.496,10.384,12.805,18.958,12.805h10.309c8.572,0,15.921-5.307,18.957-12.805  c0.484,0.117,0.979,0.186,1.48,0.186c3.44,0,6.24-2.799,6.24-6.239v-4.028C63.833,29.995,61.033,27.196,57.593,27.196z   M6.406,40.703c-1.786,0-3.239-1.453-3.239-3.239v-4.028c0-1.786,1.453-3.239,3.239-3.239c0.191,0,0.378,0.041,0.564,0.074  c-0.367,1.532-0.583,3.122-0.583,4.765v0.83c0,1.644,0.216,3.231,0.583,4.764C6.784,40.663,6.598,40.703,6.406,40.703z   M37.154,53.322H26.846c-9.626,0-17.458-7.832-17.458-17.457v-0.83c0-9.626,7.832-17.458,17.458-17.458h10.308  c9.627,0,17.459,7.832,17.459,17.458v0.83C54.611,45.491,46.779,53.322,37.154,53.322z M60.833,37.464  c0,1.786-1.453,3.239-3.24,3.239c-0.19,0-0.377-0.04-0.563-0.073c0.367-1.532,0.584-3.122,0.584-4.765v-0.83  c0-1.645-0.217-3.233-0.584-4.765c0.188-0.033,0.373-0.074,0.563-0.074c1.787,0,3.24,1.453,3.24,3.24V37.464z"/><path d="M24.008,25.695c-0.578-0.593-1.528-0.603-2.121-0.025l-1.33,1.298l-1.298-1.33c-0.579-0.593-1.529-0.603-2.121-0.025  c-0.593,0.579-0.604,1.528-0.025,2.121l1.299,1.33l-1.33,1.299c-0.593,0.579-0.604,1.528-0.025,2.121  c0.294,0.301,0.684,0.452,1.073,0.452c0.378,0,0.756-0.142,1.048-0.427l1.33-1.298l1.298,1.33c0.294,0.301,0.684,0.452,1.073,0.452  c0.378,0,0.756-0.142,1.048-0.427c0.593-0.579,0.604-1.528,0.025-2.121l-1.298-1.33l1.33-1.298  C24.575,27.238,24.586,26.288,24.008,25.695z"/><path d="M45.586,29.113l1.33-1.298c0.593-0.579,0.604-1.528,0.025-2.121s-1.528-0.604-2.121-0.025l-1.33,1.298l-1.298-1.33  c-0.578-0.593-1.527-0.603-2.121-0.025c-0.593,0.579-0.604,1.528-0.025,2.121l1.299,1.33l-1.33,1.298  c-0.593,0.579-0.604,1.528-0.025,2.121c0.294,0.301,0.684,0.453,1.073,0.453c0.378,0,0.756-0.143,1.048-0.428l1.329-1.298  l1.299,1.33c0.294,0.301,0.684,0.452,1.073,0.452c0.378,0,0.756-0.142,1.048-0.427c0.593-0.579,0.604-1.528,0.025-2.121  L45.586,29.113z"/><path d="M37.25,45.295h-10.5c-0.829,0-1.5-0.672-1.5-1.5s0.671-1.5,1.5-1.5h10.5c0.828,0,1.5,0.672,1.5,1.5  S38.078,45.295,37.25,45.295z"/>
    </symbol>
  </svg>

  <!-- use it -->
  <svg class="icon">
  <use xlink:href="#two"></use>
  </svg>
#+END_SRC

NOTE:
=use= is kind of magical in that it clones the elements inside the
symbol and moves them into what is called the Shadow DOM.
**  fragment identifier
sprite.svg
#+BEGIN_SRC xml
<svg xmlns="http://www.w3.org/2000/svg">
      <symbol viewBox="0 0 100 100" id="one">
        <title>one</title>
        <path d="M91.928,67.838h-1.896V28.628c0-10.537-8.573-19.11-19.11-19.11s-19.109,8.573-19.109,19.11v40.459  c0,9.158-7.451,16.609-16.61,16.609c-9.159,0-16.61-7.451-16.61-16.609V29.329h5.232v-6.595h-0.128  c3.053-2.052,5.066-5.537,5.066-9.483V12h-6.853V7.375c0-0.69-0.56-1.25-1.25-1.25s-1.25,0.56-1.25,1.25V12h-5.463V7.375  c0-0.69-0.56-1.25-1.25-1.25s-1.25,0.56-1.25,1.25V12H5.921v1.25c0,3.947,2.014,7.432,5.066,9.483h-0.128v6.595h5.232v39.759  c0,10.537,8.573,19.109,19.11,19.109c10.538,0,19.11-8.572,19.11-19.109V28.628c0-9.159,7.451-16.61,16.609-16.61  c9.159,0,16.61,7.451,16.61,16.61v39.209h-2.372c-0.69,0-1.25,0.56-1.25,1.25v14.236c0,0.69,0.56,1.25,1.25,1.25h2.134v8.801  c0,0.69,0.56,1.25,1.25,1.25s1.25-0.56,1.25-1.25v-8.801h2.135c0.69,0,1.25-0.56,1.25-1.25V69.088  C93.178,68.397,92.618,67.838,91.928,67.838z M8.508,14.5h17.666c-0.61,4.329-4.338,7.67-8.833,7.67S9.118,18.829,8.508,14.5z   M13.359,25.233h7.964v1.595h-7.964V25.233z M90.678,82.074h-4.269V70.338h4.269V82.074z"/>
      </symbol>

#+END_SRC

index.html
#+BEGIN_SRC html
    <svg>
      <use xlink:href="/sprite.svg#one"></use>
    </svg>
#+END_SRC
** Build tools
*** ICOMOON
https://icomoon.io/

*** GRUNTICON
grunticon.com

** Sizing
- The viewport is simply the height and width of the element: the visible
  area of the SVG image. It’s often set as =width= and =height= attributes
  right on the SVG itself, or through CSS.

- The =viewBox= is an attribute of svg that determines the coordinate
  system and aspect ratio. The four values are =x=, =y=, =width=, and =height= .

- Viewport and viewBox in perfect harmony when you apply no =width= or
  =height= to the svg (either via attribute or CSS), or if you do,
  they match the aspect ratio of the =viewBox=.

- What if the aspect ratio of viewport don’t match with =viewBox=?
  What happens now, by default, is that the SVG will draw itself as
  large as it can, centered along the longest dimension.

*** =preserveAspectRatio=
#+BEGIN_SRC xml
  <svg preserveAspectRatio="xMaxYMax" ... > <!-- default is xMidYMid -->
#+END_SRC

The =x= and =Y= parts of that value are followed by =Min=, =Mid=, or
=Max=. The reason SVG normally centers in the viewport is because it
has a default value of =xMidYMid=. If you change that to =xMaxYMax=,
it tells the SVG: Make sure you go horizontally as far to the right as
you can, and vertically as far to the bottom as you can. Then be as
big as you can be without cutting off .

The “without cutting off” part is another aspect of
=preserveAspectRatio=. The default value is =xMidYMid meet=. You can
replace =meet= with =slice= to say instead: Fill the area entirely;
cutting off is okay .

The =background-size= property has two keywords it can take: =contain= and
=cover=. The contain value means “make sure this entire image is
viewable, even if you have to shrink it,” which makes it just like
=meet=. The =cover= value means “make sure this covers the entire area,
even if you have to cut parts off,” which makes it just like =slice=.

** ANIMATING

*** With CSS
**** So under what circumstances would you choose CSS to animate SVG?
1. You’re doing most of your design work in CSS and want to keep it
  there. You like the syntax of CSS.
2. You’re using inline SVG so you can keep the CSS together with your
  site’s main stylesheets.
3. The animation is fairly simple and CSS is able to animate the things
  you need to animate (like positions, fills, strokes).
4. You’re hoping to exploit the performance and browser optimizations of
  CSS animations.
5. You want to put a block of style inside the SVG, hoping it works in SVG
  as img or background-image. Mileage may vary. It works today in
  Chrome, but not in Firefox. SMIL animation works in both.

**** Why might you avoid CSS animations on SVG ?
1.  CSS can’t animate everything you might want to animate, like the
  position of an individual point. CSS can animate properties but not
  attributes. (Presentational attributes are properties.)

2. Your animation is fairly complex, and you need better tools than
  @keyframes or transitions. For instance, you might want to start one
  part of an animation when another ends, without having to match up
  timing manually.

3. You’re experiencing buggy or broken behavior. Needless to say, there
  is quite a bit of this. Internet Explorer doesn’t support CSS animations
  on SVG elements at all. Firefox doesn’t support percentage-based
  transform-origin, which is sometimes vital to an animation. It’s...a
  complicated love story.

*** With SMIL
#+BEGIN_SRC xml
    <svg xmlns="http://www.w3.org/2000/svg">
      <circle r="30" cx="50" cy="50" fill="orange">
        <animate
          attributeName="fill"
          from="orange"
          to="red"
          dur="1s"
          begin="click"
          fill="freeze" />
      </circle>
#+END_SRC

|---------------+------------------------------------------------------------------------------------------------------------------------|
| attributeName | Required: Must be a valid attribute on the element the animation applies to                                            |
|---------------+------------------------------------------------------------------------------------------------------------------------|
| from          | Optional: If left out, the animation will start at the current values of that attribute                                |
|---------------+------------------------------------------------------------------------------------------------------------------------|
| to            | Required: The value the attribute should be animated to                                                                |
|---------------+------------------------------------------------------------------------------------------------------------------------|
| dur           | Required: The duration of the animation. Supports time values like 2s or 1250ms                                        |
|---------------+------------------------------------------------------------------------------------------------------------------------|
| xlink:href    | Required: If the animation is not within an element to be animated. Specifies the #id of the element                   |
|---------------+------------------------------------------------------------------------------------------------------------------------|
| begin / end   | Optional: Specifies when the animation should begin or end, like on click                                              |
|---------------+------------------------------------------------------------------------------------------------------------------------|
| fill          | Optional: Specifies what happens when the animation completes. "freeze" means "remain as the animation ends". "remove" |
|               | means to remove any effect the animation had. It's like animation-fill-mode                                            |
|---------------+------------------------------------------------------------------------------------------------------------------------|
| restart       |                                                                                                                        |
|---------------+------------------------------------------------------------------------------------------------------------------------|
| repeatCount   |                                                                                                                        |
|---------------+------------------------------------------------------------------------------------------------------------------------|
|               |                                                                                                                        |

We can trigger that animation with SMIL events, like we did in the orange circle example,
but we can also trigger animations like this with JavaScript.

#+BEGIN_SRC javascript
const ani = document.getElementById("animation-to-check");

ani.beginElement();
#+END_SRC



**** animateTransform

There are even other animation elements, like =animateTransform=, that
allow you to animate the transform attribute on SVG elements. You
can’t do that with animate alone for
instance, this doesn’t work:
#+BEGIN_SRC xml
<animate
  attributeName="transform"
  from="rotate(0 60 70)"
  to="rotate(360 60 70)"
  dur="10s" />


Instead, you need to do this:

#+BEGIN_SRC xml
<animateTransform
  attributeName="transform"
  type="rotate"
  from="0 60 70"
  to="360 60 70"
  dur="10s" />
#+END_SRC

**** animateMotion
#+BEGIN_SRC xml
<svg viewBox="0,0 10,10" width="200px" height="200px">
  <path
    id="theMotionPath"
    fill="none"
    stroke="lightgrey"
    stroke-width="0.25"
    d="
    M 5 5
    m -4, 0
    a 4,4 0 1,0 8,0
    a 4,4 0 1,0 -8,0
    " />
  <circle r="1" fill="red">
    <animateMotion dur="5s" repeatCount="indefinite">
    <mpath xlink:href="#theMotionPath" />
    </animateMotion>
  </circle>
</svg>

#+END_SRC

**** Animating Paths

#+BEGIN_SRC js
const path = document.querySelector(".path");
const length = path.getTotalLength();
#+END_SRC

The resulting length number is exactly what the dash length and stroke
offset need to be to do this trick.
** Clipping And Masking

Clipping and masking are related concepts because they are both
capable of hiding parts of an image. But the distinction between them
can be confusing, so let’s clear that up right now:

- Clipping is created from vector paths. Anything outside the path is
   hidden; anything inside is shown.
http://output.jsbin.com/hotaloz

- Masking is created from images. Black parts of the image mask hide;
  white parts show through. Shades of gray force partial transparency
  imagine a black-to-white gradient over an image that “fades out” the
  image.

** How path =d= attribute works

-Capital letter commands, like M, refer to absolutely positioned points.

-Lowercase letter commands, like m, refer to relatively positioned points.
