- Raw JS
  #+BEGIN_SRC reason
    let add = [%raw "a + b"];
    [%%raw "var a = 1"];
    let myFunction = [%raw (a, b) => "return a + b"];
  #+END_SRC
- String Unicode & Interpolation
  #+BEGIN_SRC reason
    Js.log({js|你好，
    世界|js});

    let world = "world";
    let helloWorld = {j|hello, $world|j};
  #+END_SRC
- Global Value
  #+BEGIN_SRC reason
    [@bs.val] external setTimeout : (unit => unit, int) => float = "setTimeout";
  #+END_SRC

- Global Module
  #+BEGIN_SRC reason
    [@bs.val] [@bs.scope "Math"] external random : unit => float = "random";
    let someNumber = random();

    [@bs.val] [@bs.scope ("window", "location", "ancestorOrigins")] external length : int = "length";
  #+END_SRC

- Nullable
  #+BEGIN_SRC reason
    let a = Some(5); /* compiles to 5 */
    let b = None; /* compiles to undefined */
  #+END_SRC

  Handling a value that can be ~undefined~ and ~null~, by ditching the
  ~option~ type and using ~Js.Nullable.t~:
  #+BEGIN_SRC reason
    let jsNull = Js.Nullable.null;
    let jsUndefined = Js.Nullable.undefined;

    let result1: Js.Nullable.t(string) = Js.Nullable.return("hello");
    let result2: Js.Nullable.t(int) = Js.Nullable.fromOption(Some(10));
    let result3: option(int) = Js.Nullable.toOption(Js.Nullable.return(10));
  #+END_SRC
