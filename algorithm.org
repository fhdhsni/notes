- BST
  + https://codepen.io/beaucarnes/pen/ryKvEQ?editors=0011
- Euclidian Algorithm:
  The Euclidean Algorithm for finding ~GCD(A,B)~ is as follows:
  ~If A = 0~ then ~GCD(A,B)=B~, since the ~GCD(0,B)=B~, and we can stop.
  ~If B = 0~ then ~GCD(A,B)=A~, since the ~GCD(A,0)=A~, and we can stop.
  Write A in quotient remainder form (A = Bâ‹…Q + R)
  Find ~GCD(B,R)~ using the Euclidean Algorithm since ~GCD(A,B) = GCD(B,R)~

  #+BEGIN_SRC javascript
    /**
     ,*
     ,* @param {number} a
     ,* @param {number} b
     ,*/
    function euclid_gcd(a, b) {
      if (a === 0) return b;
      if (b === 0) return a;

      // a = b.quotient + remainder
      // const quotient = a / b;
      const remainder = a % b;

      return euclid_gcd(b, remainder);
    }
  #+END_SRC

- topologically sort the graph
- Bellman-Ford algorithm
- knapsack problem
- dijkstra
- longest common substring
- longest common subsequence
- Levenshtein distance measures
- k-nearest neighbors
- Naive Bayes classifire
- B-trees
- Red-black trees
- Heaps
- Splay trees
- The Fourier transform
- Bloom filters
- HyperLogLog
- Simhash
- Diffie-Hellman
- Closest Pair of Points
