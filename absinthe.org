- Object type: has fields and represents a complex value,
  + Object types can have fields that point to themselves

- Scalar types: they have no fields of their own (e.g. Int and String)

- All queries start at a root object we have on our schema graph
  (we’re calling it ~RootQueryType~).

- Building a schema presents two major categories of work: describing
  the types and the edges between types (both by defining them and
  adding built-in documentation, which you’ll see later), and writing
  the business logic that edges use to find their data.

- how a GraphQL request is handled
  #+BEGIN_SRC
  --> client request (with a graphql document payload) -->
                                                       --> Phoenix routing
                                                       --> the absinthe_plug package
                                                       --> the absinthe package
                                                       --> Your GraphQL Schema
                                                       --> Your business logic
                                JSON response <-----------

  #+END_SRC

* Building a Schema
** Defining an Object Type
- sample
  #+BEGIN_SRC elixir
    defmodule PlateSlateWeb.Schema do
      use Absinthe.Schema

      query do
        # ...
      end

      object :menu_item do
        field(:id, :id)
        field(:name, :string)
        field(:description, :string)
      end
    end
  #+END_SRC
- built-in scalar types
  | GraphQL | Absinthe   | Description                                                        |
  |---------+------------+--------------------------------------------------------------------|
  | Int     | ~:integer~ | Signed 32-bit numeric non-fractional values                        |
  | Float   | ~:float~   | Signed double-precision fractional values as specified by IEEE 754 |
  | String  | ~:string~  | Textual data, represented as UTF-8 character sequences             |
  | Boolean | ~:boolean~ | true or false                                                      |
  | Null    | ~:null~    | Null values, represented as the keyword null                       |
  | ID      | ~:id~      | A unique identifier, often used to re-fetch an object or as        |

** Making a Query
   #+BEGIN_SRC elixir
     defmodule PlateSlateWeb.Schema do
       alias PlateSlate.{Menu, Repo}
       use Absinthe.Schema

       query do
         @desc "The list of available items on the menu"
         field :menu_items, list_of(:menu_item) do
           resolve(fn _, _, _ ->
             {:ok, Repo.all(Menu.Item)}
           end)
         end
       end

       @desc "each fucking menu item"
       object :menu_item do
         @desc "this is the fucking id"
         field(:id, :id)
         @desc "this is the fucking name"
         field(:name, :string)
         field(:description, :string)
         field(:price, :float)
       end
     end
   #+END_SRC
** Writing a test
   #+BEGIN_SRC elixir
     defmodule PlateSlateWeb.Schema.Query.MenuItemsTest do
       use PlateSlateWeb.ConnCase, async: true

       setup do
         PlateSlate.Seeds.run()
       end

       @query """
       {
         menuItems {
           name
         }
       }
       """

       test "menuItems field returns menu items" do
         conn = build_conn()
         conn = get(conn, "/api", query: @query)

         assert json_response(conn, 200) == %{
                  "data" => %{
                    "menuItems" => [
                      %{"name" => "Reuben"},
                      %{"name" => "Croque Monsieur"},
                      %{"name" => "Muffuletta"},
                      # ...
                    ]
                  }
                }
       end
     end
   #+END_SRC
* taking user input
** defining field arguments
- sample
  #+begin_src elixir
      query do
        @desc "the list of available items on the menu"
        field :menu_items, list_of(:menu_item) do
          arg(:matching, :string)

          resolve(&resolvers.menu_items/3)
        end
      end
  #+end_src
  and ~resolvers.menu_items/3~
  #+begin_src elixir
    defmodule plateslateweb.resolvers.menu do
      alias plateslate.menu

      def menu_items(_, args, _) do
        {:ok, menu.list_items(args)}
      end
    end
  #+end_src
  ~menu.list_items/1~
  #+begin_src elixir
      def list_items(%{matching: name}) when is_binary(name) do
        item
        |> where([m], ilike(m.name, ^"%#{name}%"))
        |> repo.all()
      end

      def list_items(_) do
        list_items()
      end
  #+end_src
  and to call it
  #+begin_src elixir
    {
      menuitems(matching: "re") {
        name
        price
        addedon
      }
    }
  #+end_src
** using variable
- here’s our menu items query operation with a definition for a
  variable we’ll be using, $term, and then its use for the matching
  argument:
  #+begin_src javascript
    query ($term: string) {
      menuitems(matching: $term) {
        name
      }
    }
  #+end_src
  + variable declarations are provided directly before the curly braces
  that start the body of an operation, and are placed inside a set of
  parentheses. variable names start with a dollar sign (~$~), and their
  graphql types follow after a colon (~:~) and a space character. if we
  were declaring multiple variables, we’d list them separated by
  commas.
  #+begin_src javascript
    "{
      "query": "query foo($term: string) {\n  menuitems(matching: $term) {\n    name\n  }\n}\n",
      "variables": {
        "term": "re"
      },
      "operationname": "foo"
    }"
  #+end_src
  naming is optional
** using enumeration types
- sample
  #+begin_src elixir
    enum :sort_order do
        value(:asc)
        value(:desc)
      end
  #+end_src
  to make it an argument in our query
  #+begin_src elixir
    query do
        field :menu_items, list_of(:menu_item) do
          arg(:order, type: :sort_order, default_value: :asc)

          resolve(&resolvers.menu.menu_items/3)
        end
      end
  #+end_src
  to use it
  #+begin_src javascript
    {
      menuitems(order: desc) {
        name
      }
    }
  #+end_src
  or with variables
  #+begin_src javascript
    query ($order: SortOrder) {
      menuItems(order: $order) {
        name
      }
    }

    // variables
    {"order": "ASC"}
  #+END_SRC
  sample test
  #+BEGIN_SRC elixir
    @query """
    query ($order: SortOrder!) {
      menuItems(order: $order) {
        name
      }
    }
    """
    @variables %{"order" => "DESC"}
    test "menuItems field returns items descending using variables" do
      response = get(build_conn(), "/api", query: @query, variables: @variables)
      assert %{
        "data" => %{"menuItems" => [%{"name" => "Water"} | _]}
      } = json_response(response, 200)
    end
  #+END_SRC
  notice the ~!~, this makes the variable mandatory
** input object types
- We can collect multiple arguments and model them as a special object
  type used just for argument values.
- Here are some things to keep in mind when building input objects:
  + Input objects can be nested. You can define an input object field
    as having an input object type. This nesting can be arbitrarily
    deep.
  + Input object types, unlike normal object types, do not support
    circular references. You can’t have two input types that refer to
    each other, either directly or through an intermediary.
  + Input object type fields can be of any type that a field argument
    might use. It’s best to just think of them as structured
    arguments.

- sample
  #+BEGIN_SRC elixir
    @desc "Filtering options for the menu item list"
    input_object :menu_item_filter do
      @desc "Matching a name"
      field :name, :string
      @desc "Matching a category name"
      field :category, :string
      @desc "Matching a tag"
      field :tag, :string
      @desc "Priced above a value"
      field :priced_above, :float
      @desc "Priced below a value"
      field :priced_below, :float
    end
  #+END_SRC
  note that we’re not using ~arg~ anymore.
  - and to use it in a query
    #+BEGIN_SRC elixir
      query do
        @desc "The list of available items on the menu"
        field :menu_items, list_of(:menu_item) do
          arg(:filter, :menu_item_filter)
          arg(:order, type: :sort_order, default_value: :asc)

          resolve(&Resolvers.Menu.menu_items/3)
        end
      end
    #+END_SRC
    and from client it would be
    #+BEGIN_SRC elixir
      query {
        menuItems(filter: {category: "Sandwiches", tag: "Vegetarian"}) {
          name,
          price
        }
      }
    #+END_SRC
    or with variable
    #+BEGIN_SRC elixir
    query ($category: String, $tag: String) {
        menuItems(filter: {category: $category, tag: $tag}) {
          name,
          price
        }
      }
      # variables
      {"category": "Sandwiches", "tag": "Vegetarian"}
    #+END_SRC
    even better
    #+BEGIN_SRC elixir
      query ($filter: MenuItemFilter!) {
        menuItems(filter: $filter) {
          name,
          price
        }
      }
      #
      {"filter": {"category": "Sandwiches", "tag": "Vegetarian"}}
    #+END_SRC
** Marking Arguments as Non-Null
- front-end developer can use variable declarations with exclamation
  marks to ensure variable values are provided.
  #+BEGIN_SRC elixir
    query ($filter: MenuItemFilter!) {
      menuItems(filter: $filter) {
        name
      }
    }
  #+END_SRC
- but schema designer can enforce non-null constraints on the backend
  as well. We can do this by using the Absinthe ~non_null~ macro,
  wrapping the argument type:
  #+BEGIN_SRC elixir
    field :menu_items, list_of(:menu_item) do
      arg :filter, non_null(:menu_item_filter) # <--
      arg :order, type: :sort_order, default_value: :asc
      resolve &Resolvers.Menu.menu_items/3
    end

  #+END_SRC
  Our use of ~non_null~ here ensures that the ~:filter~ argument is
  always provided. but still we can do
  #+BEGIN_SRC elixir
    query {
      menuItems(filter: {}) {
        name
        price
      }
    }
  #+END_SRC
  but we can go deeper can make on the ~:menu_item_filter~ input
  object and make one of its field non-null
  #+BEGIN_SRC elixir
    input_object :menu_item_filter do
      field :category, non_null(:string)
      field :tag, :string
      field :priced_above, :float
      field :priced_below, :float
    end
  #+END_SRC
  and to use it
  #+BEGIN_SRC elixir
    query {
      menuItems(filter: {category: "Sandwiches"}) {
        name
        price
      }
    }
  #+END_SRC
- Non-Nullability
  + When the field for an input object is non-nullable—just as with
    arguments—validation will fail when a non-null value isn’t
    provided for that field. It’s different for normal (output) object
    fields. Declaring an output object field as non-nullable means
    that the schema will guarantee the field resolver’s result will
    always be non-null.
  + Non-nullability for input object fields means the client needs to
    provide a non-null value as part of the request. Non-nullability
    for output object fields means the server needs to provide a non-
    null value as part of the response.
- Dealing with Dependent Arguments
  + Make the field arguments more complex: try grouping arguments that
    go together into input objects. this lets you leave the input
    object nullable but individual input object fields as
    non-nullable. Sometimes it’s more important to keep a field
    cohesive.
  + Make the field simpler: split it into multiple, simpler fields
    that handle narrower use cases and have their own documentation
    (via ~@desc~). Don’t be afraid to create more, case-specific fields,
    each with a narrow focus. You can always share resolution logic
    and output types.
** Creating Your Own Scalar Types
- building a ~:date~ type to be used like
  #+BEGIN_SRC elixir
    {
      menuItems(addedBefore: "2017-01-31") {
        name
      }
    }
  #+END_SRC
  or
  #+BEGIN_SRC elixir
    {
      menuItem {
        name
        addedOn
      }
    }
  #+END_SRC
  * define
     #+BEGIN_SRC elixir
       scalar :date do
         parse(fn input ->
           with %Absinthe.Blueprint.Input.String{value: value} <- input,
           {:ok, date} <- Date.from_iso8601(value) do
             {:ok, date}
           else
             _ -> :error
           end
         end)

         serialize(fn date ->
           Date.to_iso8601(date)
         end)
       end
     #+END_SRC
    + ~parse~ converts a value coming from the user into an Elixir term
      (or returns ~:error~).
    + ~serialize~ converts an Elixir term back into a value that can be
      returned via JSON.
  * Whole schema using ~:date~ scalar
    #+BEGIN_SRC elixir
      defmodule PlateSlateWeb.Schema do
        alias PlateSlateWeb.Resolvers
        use Absinthe.Schema

        query do
          @desc "The list of available items on the menu"
          field :menu_items, list_of(:menu_item) do
            arg(:filter, non_null(:menu_item_filter))
            arg(:order, type: :sort_order, default_value: :asc)

            resolve(&Resolvers.Menu.menu_items/3)
          end
        end

        object :menu_item do
          field(:id, :id)
          field(:name, :string)
          field(:description, :string)
          field(:price, :float)
          field(:added_on, :date)
        end

        enum :sort_order do
          value(:asc)
          value(:desc)
        end

        @desc "Filtering options for the menu item list"
        input_object :menu_item_filter do
          field(:name, :string)
          # field(:category, non_null(:string))
          field(:category, :string)
          field(:tag, :string)
          field(:priced_above, :float)
          field(:priced_below, :float)
          @desc "Added to the menu before this date"
          field(:added_before, :date) # <--------
          @desc "Added to the menu after this date"
          field(:added_after, :date) # <---------
        end

        scalar :date do
          parse(fn input ->
            with %Absinthe.Blueprint.Input.String{value: value} <- input,
                 {:ok, date} <- Date.from_iso8601(value) do
              {:ok, date}
            else
              _ -> :error
            end
          end)

          serialize(fn date ->
            Date.to_iso8601(date)
          end)
        end
      end
    #+END_SRC
