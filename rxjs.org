 Producers
 Consumers
 Data pipeline
 Time

- The observer pattern defines producers as the subject; in RxJS, we
  call them observables, as in something that’s able to be observed.
- Observables are in charge of pushing notifications, so we refer to
  this behavior as fire-and-forget, which means that we’ll never
  expect the producer to be involved in the processing of events, only
  the emission of them.
- In a simple sense, functors are containers that can wrap data and
  expose a mapping method that allows you to immutably apply
  transformations on this data, as shown by the Array.map() method.
- One of the key principles of a reactive system is the ability to
  stay afloat under varying workloads—known as elasticity. Obviously,
  this has many architectural and infrastruc- tural implications that
  extend beyond the scope of this book, but a corollary to this is
  that the paradigm you use shouldn’t change whether you’re dealing
  with one, one hundred, or thousands of events. RxJS offers a single
  computing model to handle finite as well as infinite streams.
- A key design principle behind RxJS streams is to give you a familiar
  traversal mecha- nism, just as you have with arrays. Iterators are
  used to traverse containers of data in a structure-agnostic way or
  independent of the underlying data structure used to har- ness these
  elements, whether it’s an array, a tree, a map, or even a stream. In
  addition, this pattern is effective at decoupling the business logic
  applied at each element from the itera- tion itself. The goal is to
  provide a single protocol for accessing each element and mov- ing on
  to the next

-
#+BEGIN_SRC javascript
function BufferIterator(arr, bufferSize = 2) {
  this[Symbol.iterator] = function () {
    let nextIndex = 0;

    return {
      next: () => {
        if(nextIndex >= arr.length) {
          return { done: true}
        } else {
          let buffer = new Array(bufferSize);
          for(let i = 0; i < bufferSize; i++) {
            buffer[i] = (arr[nextIndex++]);
          }
          return {value: buffer, done: false}
        }
      },
    }
  }

}

const foo = new BufferIterator([1, 2, 3, 4, 7, 8 , 9 , 10])

for (let x of foo) {
  console.log(x);
}

#+END_SRC

- The RxJS from() operator is probably one of the most commonly
  used. And to make it a bit more idiomatic, RxJS has overloaded the
  *forEach* observable method as well, with the exact same semantics as
  subscribe:

-
#+BEGIN_SRC js2
  const observable = events => {
    const INTERVAL = 1 * 1000;
    let schedulerId;

    return {
      subscribe: observer => {
        schedulerId = setInterval(() => {
          if(events.length === 0) {
            observer.complete();
            clearInterval(schedulerId);
            schedulerId = undefined;
          }
          else {
            observer.next(events.shift());
          }
        }, INTERVAL);
        return {
          unsubscribe: () => {
            if(schedulerId) {
              clearInterval(schedulerId);
            }
          }
        };
      }
    };
  }

  let sub = observable([1, 2, 3]).subscribe({
    next: console.log,
    complete: () => console.log('Done!')
  });
#+END_SRC


- Operators are pure functions that create a new observable based on
  the current one—the original is unchanged.

- In RxJS, every operator will return an observable instance so that
  it can support further chaining. This property means that a
  virtually unlimited variety of combinations can be
  assembled. Whereas observables are abstrac- tions over various data
  sources, their operators are just abstractions of those abstrac-
  tions. That is, just like the adapter methods used to create
  observables from other library types, an operator is simply an
  adapter to convert an existing observable into a new one with
  more-specific functionality.

 Each operator will affect only the propagation of an event, not its creation.
 Time operators act sequentially.
 remember that you can think of each operator as a workstation on an assembly line


- =delay=: You can relate this to a downstream river with control dams
  along the way that temporarily delay the flow of water. When the
  water reaches its destination, however, all of the water would be
  there at once.
- =debounceTime=: execute a function or some action only if a certain period has passed without it being called.

- =throttleTime=: Throttling ignores values from an observable sequence that are
  followed by another value before a certain time. “execute a function at most once every period”

- =merge= and =concat= It’s important to note that a merge differs
  from a concatenation on one key behavior: whereas the merge()
  operator will allow you to immediately subscribe to all of the
  source observables, concat() will subscribe to only one observable
  at a time.  Although it continues to manage the subscriptions to
  each of the underlying streams, it will hold only a single
  subscription at a time and process that before the next one in
  order. You can see this behavior clearly with this simple example:

- Being *cold* means that each new subscription is creating a new
  independent stream with a new starting point for that stream. This
  means that subscribers will independently receive the exact same set
  of events always, from the beginning. Here’s another way to
  conceptualize it: when creating a cold observable, you’re actually
  creating a plan or recipe to be executed later—repeatedly, top to
  bottom.

- *Hot* observables are those that produce events regardless of the
  presence of sub- scribers—they are active. In the real world, hot
  observables are used to model events like clicks, mouse movement,
  touch, or any other events exposed via event emitters.  This means
  that, unlike the cold counterpart where each subscription triggers a
  new stream, subscribers to hot observables tend to receive only the
  events that are emitted after the subscription is created, Because
  of the unpredictable and unrepeatable nature of the data that hot
  observables emit, you can reason that they’re not completely pure,
  from a theoretical perspective.


- A *replay* is about reemitting the same sequence of events to each
  subscriber—in effect, replaying the entire sequence.

- A resubscribe re-creates the same pipeline and reexecutes the code
  that produces events. Although the results emitted by the producer
  will be implementation dependent, if your observable pipeline
  remains pure, then you can guarantee that all subscribers will
  receive the same events for the same input produced.



 * Snippets

Cold
#+BEGIN_SRC js
let obs = Rx.Observable.create(observer => observer.next(1));

obs.subscribe(v => console.log("1st subscriber: " + v));
obs.subscribe(v => console.log("2nd subscriber: " + v));
#+END_SRC

semi-hot
#+BEGIN_SRC js
let obs = Rx.Observable
            .create(observer => observer.next(Date.now()))
            .publish();

obs.subscribe(v => console.log("1st subscriber: " + v)); // 1st subscriber: 1465994477014
obs.subscribe(v => console.log("2nd subscriber: " + v)); // 2nd subscriber: 1465994477014

obs.connect();
#+END_SRC


Really hot
#+BEGIN_SRC js
  let obs = Rx.Observable
              .create(observer => observer.next(Date.now()))
              .publish();

  obs.connect();

  obs.subscribe(v => console.log("1st subscriber: " + v)); // nothing because it's hot
  obs.subscribe(v => console.log("2nd subscriber: " + v)); // nothing because it's hot
#+END_SRC


worm
#+BEGIN_SRC js
    let obs = Observable.interval(1000)
      .publish() // We use publish to share the value producer across several subscriptions (one indicator of being hot!)
      .refCount();

    obs.subscribe(v => console.log("1st subscriber:" + v));

    setTimeout(() => obs.subscribe(v => console.log("2nd subscriber:" + v)), 1100);

  // LOGS
  // 1st subscriber:0
  // 1st subscriber:1
  // 2nd subscriber:1
  // 1st subscriber:2
  // 2nd subscriber:2
  // ...
#+END_SRC


#+BEGIN_SRC js
let obs = Observable.interval(1000)
  .publish()
  .refCount();

setTimeout(() => {
  obs.subscribe(v => console.log("1st subscriber:" + v));

  setTimeout(
    () => obs.subscribe(v => console.log("2nd subscriber:" + v)),
    1100
  );
}, 2000);

  // LOGS same as prevous
  // 1st subscriber:0
  // 1st subscriber:1
  // 2nd subscriber:1
  // 1st subscriber:2
  // 2nd subscriber:2
  // ...
#+END_SRC

Interestingly we see exactly the same output as in the previous
experiment which means we are dealing with an Observable that is
rather warm than really hot. And that’s because of the way refCount
works. The publish operator creates an ConnectableObservable which
means it creates an Observable that shares one single subscription to
the underlying source. However, the publish operator doesn’t subscribe
to the underlying source just yet. It’s more like a gatekeeper that
makes sure that subscriptions aren’t made to the underlying source but
to the ConnectableObservable instead.

It’s the job of the connect operator to actually cause the
ConnectableObservable to subscribe to the underlying source (the thing
that produces values). In our case we’re using refCount which is an
operator that builds up on connect and causes the
ConnectableObservable to subscribe to the underlying source as soon as
there is a first subscriber and to unsubscribe from it as soon as
there’s no subscriber anymore. It simply keeps track of how many
subscriptions are made to the ConnectableObservable.



#+BEGIN_SRC js
    let obs = Rx.Observable
                .interval(1000)
                .publish();
    obs.connect();                  // make it hot

    setTimeout(() => {
      obs.subscribe(v => console.log("1st subscriber:" + v));
      setTimeout(
        () => obs.subscribe(v => console.log("2nd subscriber:" + v)), 1000);

    },2000);

  // logs
  // 1st subscriber:1
  // 1st subscriber:2
  // 1st subscriber:3
  // 2nd subscriber:3
  // 1st subscriber:4
  // 2nd subscriber:4
#+END_SRC


* front-end masters
- ~concatAll~
- ~mergeAll~
- ~switchAll~
