<name-of-remote-usually-origin> => NORUO

NOTE: =HEAD= refers to the last commit in the current branch.

* SIMPLE STUFF

** RESET
*NOTE: Don't do these after you pushed to remote*

*NOTE: =--mixed= is the default option, so if you don't specify anything it will be =--mixed=*

*NOTE: HEAD^ is just an example, use whatever ever SHA you want*

*NOTE: goto stackoverflow answer related to reset https://stackoverflow.com/a/3528483/2576218*

- To blow away all the changes since last commit for a give file =git checkout -- <file>=
- To reset into staging =git reset --soft HEAD^=.
    + That is to say: move the commit one before current HEAD, but
      don't touch the =index=, in other word =git status= will show them as unstaged.
- To rest into unstaging, =git reset --mixed HEAD^= or just =git reset HEAD^=, it keeps the changes but it will put them into unstaging area
- To undo the last commit and all the changes =git reset --hard
  HEAD^=, *this modifies your working directory, note any
  uncommitted changes you have, will be removed too*
- To undo the last 2 commit and all the changes =git reset --hard HEAD^^=, *this modifies your working directory*
- To unstage a file =git reset HEAD <file>= to unstage.

     #+CAPTION: git tree movements visualized
     #+NAME:   fig:SED-HR4049
     [[./reset.jpg]]


** REMOTE
- To add a remote: =git remote add <NORUO> remote-address= 
- To get list of remotes =git remote -v=
- To push to remote =git push -u <NORUO> local-branch-name=,
  =-u= sets the upstream.
- To pull from a remote =git pull=
- To remove a remotes =git remote rm <name>=
- To show remote branches and their status(tracked or not) =git remote show <NORUO>=
- To remove a remote branch =git push <NORUO> :name-of-branch=. 
  It doesn't delete the local branch. You should delete it with =git branch -d <name-of-branch>=
- To clean up deleted remote branches =git remote prune <NORUO>=

** BRANCH
- To create a branch =git branch <name>=
- To switch to a branch =git checkout <name-of-branch>=
- To merge =git merge <name-of-the-branch-to-be-merged-with-the-current-branch>=
- To delete a branch =git branch -d <name>=
- To list all remote branches =git branch -r=

** PULL
What does =git pull= do? 
  1. fetches (or Syncs) our local repository with the remote one, but
     it doesn't merge them (same as =git fetch=)
  2. merges =origin/master= with master (same as git merge =origin/master=)

** PUSH
- To link a local branch to a remote =git push <NORUO> <name-of-local-branch>=
- 

** TAG
A tag is a reference to a commit
- To list all the tags =git tag=
- To go to a tag =git checkout <tag-here>=
- To add a new tag =git tag -a <tag-name> =m "sample-message"= e.g
  =git tag -a 0.1 -m "version 0.1"=
- To push new tags =git push --tags=

** REBASE
- What doesn't =git rebase= do? 
Lets say we want to get our local master branch up-to-date with remote =origin/master=. So we do =git checkout master= then =git rebase origin/master=
  1. Move all the commits in =master= that are not in =origin/master= to a temporary area.
  2. Run all =origin/master= commits
  3. Run all commits in the temporary area one at a time
- In case of merge conflict, after resolving, we can use =git rebase --continue=
- To abort a rebase =git rebase --abort=

*** rebase local branch
1. =git checkout <branch-name>=
2. =git rebase master=. This gonna commit the =master= commits then it
   it runs =<branch-name>= commits on top of it.
3. =git checkout master=
4. =git merge <branch-name>= it will be a fast-forward merge.

** LOG
- To get the insertions/deletions of each commit =git log --oneline -p=, =p= for patch
- To get the number insertions/deletions in each commit =git log --oneline --stat=
- To get a graph of what's going on  =git log --oneline --graph=
- To get the log for a specified range of date
  + git log --until=1.min.ago
  + git log --since=1.day.ago
  + git log --since=1.hour.ago
  + git log --since=1.month.ago --until=2.weeks.ago
  + git log --since=1.month.ago --until=2.weeks.ago
  + git log --since=2012-01-01 --until=2017-7-21

** DIFF
- To get staged differences =git diff --staged=.
- To get diff with HEAD =git diff HEAD= or just =git diff=
- To get diff with parent of HEAD =git diff HEAD^=
- To get diff with grandparent of HEAD =git diff HEAD^^=
- To get diff of most recent with second most recent =git diff HEAD^..HEAD=
- To get diff of two specific commit with SHAs =git diff <sha1> <sha2>=
- To get diff between two branches =git diff <branch-1> <branch-2>=

** BLAME
WHO DID THAT?
- =git blame index.html --date --short=

** RM
- To remove a file, =git rm <file>=, it deletes the file from file system.
- To stop tracking a file, =git rm --cached <file>=, it doesn't delete the file from file system.

** MISCELLANEOUS
- To exclude a directory, put the directory inside =.git/info/exclude=



* ADVANCED STUFF

** REBASE
- To play with commits, interactivaly, =git rebase -i HEAD~3=, that is 3 commits before current HEAD
  + By =play= I mean, =pick=, =reword=, =edit=, =squash=,...
- =interactive rebase= alters every commit after the one you specify, so if we say =git rebase -i HEAD= it does nothing
- =interactive rebase= shows our commit from oldest to newest. That is old commit are at the top of editor.
- To split a commit into more commits we can use =edit=:
  1. =git reset HEAD^= 
  2. stage and commit as you like
  3. =git rebase --continue=
- To merge two or more commits into one commit we use =squash=

