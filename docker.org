** defs
- OCI: Open Container Intuitive
- ~runc~:
  + implemention of the OCI container-runtime-spec
  + Lightweight CLI wrapper for libcontainer
  + Create containers
- ~containerd~
  + manage container lifecycle
    - start
    - stop
    - pause
    - delete
  + sits between docker daemon and ~runc~
  + image management (to push and pull images)
- shims
  + decouple running containers from the daemon
  + ~containerd~ forks an instance of ~runc~ for each new container
  + ~runc~ process exits after the container is created
  + ~shim~ process becomes the container parent
  + response for
    + STDIN and STDOUTs
    + reporting exist status to docker daemon
- creating a container:
  #+BEGIN_SRC sh
  docker container run -it --name <NAME> <IMAGE>:<TAG>
  #+END_SRC
  1. use the CLI to execute a command
  2. Docker client uses the appropriate API payload
  3. POSTs to the correct API endpoint
  4. The Docker daemon receives instructions
  5. The Docker daemon calls ~containerd~ to start a new container
  6. The Docker daemoin usess ~gRPC~
  7. ~containerd~ creates an OCI bundle from the Docker image
  8. Tells ~runc~ to create a container using the OCI bundle
  9. ~runc~ interfaces with the OS kernel to get the constructs needed
     to create a container (This includes namespaces, cgroups, etc.)
  10. The container process is started as a child process (of ~runc~)
  11. once the container starts runc will exit

*** Docker Registry
- A *Docker Registry* is the remote location where Docker Images are
  stored. You push images to a registry and pull images from a
  registry. You can host your own registry or use a provider’s
  registry. For example, AWS and Google Cloud have registries.

*** Docker Hub
- Docker Hub is the largest registry of Docker images. It’s also the
  default registry. You can find images and store your own images on
  Docker Hub for free.
*** Docker Repository
- A Docker Repository is a collection of Docker images with the same
  name and different tags. The tag is the identifier for the image.
- Usually a repository has different versions of the same image. For
  example, Python is the name of the most popular official Docker
  image repository on Docker Hub. Python:3.7-slim refers to the
  version of the image with the 3.7-slim tag in the Python
  repository. You can push a repository or a single image to a
  registry.

*** Docker Objects
- Images
  + Read only template with instruction for creating a Docker container
  + image is based on another image
  + use Dockerfile to build images
- Containers
  + runnable instance of an image
  + connect a network to a container (containers can be attached to more than one network)
  + attach storage
  + create a new image based on its current state
- Services
  + Scale Containers across multiple Docker daemons
  + Docker Swarm
  + define desired state
- Docker Swarm
  + Multiple Docker daemons (Master and Workers)
** CLI
- Recall that a Docker image is made of a Dockerfile + any necessary
  dependencies. Also recall that a Docker container is a Docker image
  brought to life. To work with Docker commands, you first need to
  know whether you’re dealing with an image or a container.
  + A Docker image either exists or it doesn’t.
  + A Docker container either exists or it doesn’t.
  + A Docker container that exists is either running or it isn’t.

- A command referring to a specific container or image requires the
  name or id of that container or image.
*** container
- Create a container from an image.
  #+BEGIN_SRC
  docker container create my_repo/my_image:my_tag
  #+END_SRC
- Start an existing container
  #+BEGIN_SRC
  docker container start my_container
  #+END_SRC
- Create a new container and start it
  #+BEGIN_SRC
  docker container run my_image
  #+END_SRC
- commit a container (to create an image)
  #+BEGIN_SRC
  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
  #+END_SRC
*** Images
- Build a Docker image named my_image from the Dockerfile located at the specified path or URL
  #+BEGIN_SRC
  docker image build -t my_repo/my_image:my_tag .
  #+END_SRC
  + The ~.~ (period) at the end of the command tells Docker to build the
    image according to the Dockerfile in the current working
    directory.
- Push an image to a registry.
  #+BEGIN_SRC
  docker image push my_repo/my_image:my_tag
  #+END_SRC
- List your images. Shows you the size of each image, too.
  #+BEGIN_SRC
  docker image ls
  #+END_SRC
- Display an image’s intermediate images with sizes and how they were created.
  #+BEGIN_SRC
  docker image history my_image
  #+END_SRC
-




**** Summary
- Use ~docker container my_command~
  + create — Create a container from an image.
  + start — Start an existing container.
  + run — Create a new container and start it.
  + ls — List running containers.
  + inspect — See lots of info about a container.
  + logs — Print logs.
  + stop — Gracefully stop running container.
  + kill —Stop main process in container abruptly.
  + rm — Delete a stopped container.
- Use ~docker image my_command~
  + build — Build an image.
  + push — Push an image to a remote registry.
  + ls — List images.
  + history — See intermediate image info.
  + inspect — See lots of info about an image, including the layers.
  + rm — Delete an image.
- Misc
- docker version — List info about your Docker Client and Server versions.
- docker login — Log in to a Docker registry.
- docker system prune — Delete all unused containers, unused networks, and dangling images.

** Volumes
- Two Types
  + Persistent: will be available on the host, when the container goes
    away, the data still will be there
  + Ephemeral: will exist as long as a container is using them
+ They are not part of images
*** Sharing data with the host
- share a directory
  #+BEGIN_SRC
  docker run -it -v /home/farhad/play/docker/foobar:/shared_stuff ubuntu bash
  #+END_SRC
  the data will be preserved
- share a file
  #+BEGIN_SRC
  docker run -it -v /home/farhad/play/dock/foobar/blah:/the_foo ubuntu bash
  #+END_SRC
*** sharing between containers
-
  #+BEGIN_SRC sh
  # a
  docker run -it --name foobar -v /shared_data ubuntu bash


  # b
  docker run -it --volumes-from foobar ubuntu bash
  #+END_SRC
** Dockefile command
*** RUN
 - RUN creates a layer at build-time. Docker commits the state of the
   image after each RUN.
 - RUN is often used to install packages into an image. For example,
  ~RUN apk update && apk upgrade && apk add bash~
 - ~RUN~, ~CMD~ and ~ENTRYPOINT~ can be used in exec form
   or shell form. Exec form uses JSON array syntax like so:
   ~RUN ["my_executable", "my_first_param1", "my_second_param2"]~.

*** COPY
- The ~COPY . ./app~ instruction tells Docker to take the files and
  folders in your local build context and add them to the Docker
  image’s current working directory. Copy will create the target
  directory if it doesn’t exist.

*** ADD
- ADD does the same thing as COPY, but has two more use cases. ADD can
  be used to move files from a remote URL to a container and ADD can
  extract local TAR files.

*** CMD
- CMD provides Docker a command to run when a container is started. It
  does not commit the result of the command to the image at build
  time.
- Only one CMD instruction per Dockerfile. Otherwise all but the final
  one are ignored.
- CMD can include an executable. If CMD is present without an
  executable, then an ENTRYPOINT instruction must exist. In that case,
  both CMD and ENTRYPOINT instructions should be in JSON format.
- Command line arguments to ~docker run~ override arguments provided to
  CMD in the Dockerfile.

*** WORKDIR
- WORKDIR changes the working directory in the container for the COPY,
  ADD, RUN, CMD, and ENTRYPOINT instructions that follow it. A few
  notes:
- It’s preferable to set an absolute path with WORKDIR rather than
  navigate through the file system with cd commands in the Dockerfile.
- WORKDIR creates the directory automatically if it doesn’t exist.
- You can use multiple WORKDIR instructions. If relative paths are
  provided, then each WORKDIR instruction changes the current working
  directory.

*** ENTRYPOINT
- The ENTRYPOINT instruction also allows you provide a default command
  and arguments when a container starts. It looks similar to CMD, but
  ENTRYPOINT parameters are not overwritten if a container is run with
  command line parameters.
- Instead, command line arguments passed to ~docker run my_image_name~
  are appended to the ENTRYPOINT instruction’s arguments. For example,
  ~docker run my_image~ bash adds the argument bash to the end of the
  ENTRYPOINT instruction’s existing arguments.
- A Dockerfile should have at least one CMD or ENTRYPOINT instruction.

- A Dockerfile should have at least one CMD or ENTRYPOINT instruction.

- The [[https://docs.docker.com/v17.09/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact][Docker docs]] have a few suggestions for choosing between CMD and
  ENTRYPOINT for your initial container command:
  + Favor ENTRYPOINT when you need to run the same command every time.
  + Favor ENTRYPOINT when a container will be used as an executable
    program.
  + Favor CMD when you need to provide extra default arguments that
    could be overwritten from the command line.
*** VOLUME
- VOLUME specifies where your container will store and/or access
  persistent data.
*** ENV
-
  #+BEGIN_SRC
  ENV <key> <value>
  ENV <key>=<value> ...
  #+END_SRC
- The ENV instruction sets the environment variable <key> to the value
  <value>. This value will be in the environment for all subsequent
  instructions in the build stage and can be replaced inline in many
  as well.

** Caching
- When building an image, Docker steps through the instructions in
  your Dockerfile, executing each in order. As each instruction is
  examined, Docker looks for an existing intermediate image in its
  cache that it can reuse instead of creating a new (duplicate)
  intermediate image.

** List Docker CLI commands
- docker
- docker container --help

** Display Docker version and info
- docker --version
- docker version
- docker info

** Execute Docker image
- docker run hello-world

** List Docker images
- docker image ls

** List Docker containers (running, all, all in quiet mode)
- docker container ls
- docker container ls --all
- docker container ls -aq

** A Dozen Dockerfile Instructions
- ~FROM~
  + specifies the base (parent) image.
- ~LABEL~
  + provides metadata. Good place to include maintainer info.
- ~ENV~
  + sets a persistent environment variable.
- ~RUN~
  + runs a command and creates an image layer. Used to install packages into containers.
- ~COPY~
  + copies files and directories to the container.
- ~ADD~
  + copies files and directories to the container. Can upack local .tar files.
- ~CMD~
  + provides a command and arguments for an executing container. Parameters can be overridden. There can be only one CMD.
- ~WORKDIR~
  + sets the working directory for the instructions that follow.
- ~ARG~
  + defines a variable to pass to Docker at build-time.
- ~ENTRYPOINT~
  + provides command and arguments for an executing container. Arguments persist.
- ~EXPOSE~
  + exposes a port.
- ~VOLUME~
  + creates a directory mount point to access and store persistent data.

** Misc
#+BEGIN_SRC sh
  docker build -t friendlyhello .  # Create image using this directory's Dockerfile

  docker run -p 4000:80 friendlyhello  # Run "friendlyhello" mapping port 4000 to 80

  docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode

  docker container ls                                # List all running containers

  docker container ls -a             # List all containers, even those not running

  docker container stop <hash>           # Gracefully stop the specified container

  docker container kill <hash>         # Force shutdown of the specified container

  docker container rm <hash>        # Remove specified container from this machine

  docker container rm $(docker container ls -a -q)         # Remove all containers

  docker container prune                                   # To remove all stopped containers

  docker image ls -a                             # List all images on this machine

  docker image rm <image id>            # Remove specified image from this machine

  docker image rm $(docker image ls -a -q)   # Remove all images from this machine


  docker login             # Log in this CLI session using your Docker credentials

  docker image tag <image> username/repository:tag  # Tag <image> for upload to registry, if you don't want to publish to registry you can use foo:bar as a tag

  docker push username/repository:tag            # Upload tagged image to registry

  docker run username/repository:tag                   # Run image from a registry
#+END_SRC
** CheatSheet
- [[https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index][here]]
- [[https://towardsdatascience.com/15-docker-commands-you-should-know-970ea5203421][here]]
** sample
-
  #+BEGIN_SRC
  docker build -t react-example .
  #+END_SRC
-
  #+BEGIN_SRC
  docker run -d -it -v ${PWD}:/usr/src/app -v /usr/src/app/node_modules -p 3000:3000 --rm react-example
  #+END_SRC
-
  #+BEGIN_SRC
  docker exec -it 04869dd4177c bash
  #+END_SRC
- get the id of the last started container
  #+BEGIN_SRC
  docker ps -n 1 --format "{{.ID}}"
  #+END_SRC

* Linux Academy
** images
- a template for containers
- a build time construct (versus container being runtime construct)
- built from instructions in dockerfile
- comprised of multiple layers
- each layers represents an instruction in the dockerfile
- each layer, except the last one, is read-only
- each a layer is a set of differences from the layer before
- containers add a new writable layer on top of the underlying layers (aka Container layer)
- all changes made to a running container are made to the Container layer
- when the container is destroyed the Container layers (the R/W layer) is deleted

** executing container commands
- ~docker run <IMG> <CMD>~
- ~docker container exec -it <NAME> <CMD>~
- from Dockerfile
** Container logging
- logs need to be output to STDOUT and STDERR (~/dev/stderr~ and /dev/stdout)

- showing information logged by a running container
  ~docker container logs <NAME>~
- showing information logged by all containers participating in a service
  ~docker service logs <SERVICE>~
** Networking
- Container Network Model (CNM)
- The libnetwork implements (CNM)
- Network drivers
  + bridge
  + host
  + overlay
  + macvlan
  + none
  + network plugins
- commands
  #+BEGIN_SRC bash
    $ docker network ls
    $ docker network inspect <NAME>
    $ docker network create <NAME>
    $ docker network ls
    $ docker network inspect <NAME>
    $ docker network rm <NAME>
    $ docker network prune
    $ docker network connect <NETWORK> <CONTAINER> # adding a container to a network
    $ docker network disconnect <NETWORK> <CONTAINER>
    $ docker network create --subnet <SUBNET> --gateway <GATEWAY> --ip-range=<IP_RAGE> --driver=<DRIVER>

    $ docker container run -name <NAME> -it --network <NETWORK> <IMAGE> <CMD> # adding a container to a network
    $ docker container run -name <NAME> -it --network <NETWORK> --ip <IP> <IMAGE> <CMD> # assigning an IP to a container
  #+END_SRC
** Data Storage
*** non-persistent
- Data that is ephemeral
- Every container has it
- Tied to the lifecycle of the container
- by default local storage (on linux ~/var/lib/docker/<STORAGE-DRIVER>/~)
  + storage driver depends on distribution
    - REHL uses overlay2
    - Ubuntu usus overlay2 or aufs
    - SUSE usus btrfs
*** persistent
- volumes
  1. create the volume
  2. create your directory
  3. mounted to a directory in the container
  4. data is written to that volume
  5. deleting the container does not delete that volume
  6. first class citizens
  7. uses the local driver by default (means created local on the Docker server)
  8. volumes are decoupled from the container
  9. third party drivers
     * Block Storage
     * File Storage
     * Object Storage
  10. on linux (~/var/lib/docker/volumes/~)
*** commands
  #+BEGIN_SRC sh
  $ docker volume ls
  $ docker volume create <NAME>
  $ docker volume inspect <NAME>
  $ docker volume rm <NAME>
  $ docker volume prune
  #+END_SRC
*** bind mounts
**** using mount flag
-
 #+BEGIN_SRC bash
 $ docker container run -d --name <NAME> --mount type=bind,source=<SOURCE>,target=<TARGET> <IMG>
 # e.g. docker container run -d --rm --mount type=bind,source="$(pwd)"/target,target=/app nginx
 # e.g. docker container run -d --rm -v "$(pwd)"/target:/app nginx
 #+END_SRC

*** volumes
-
  #+BEGIN_SRC bash
  $ docker volume create <VOL-NAME>
  # $ docker volume create html-volume

  $ docker container run --mount type=volume,source=<SOURCE>,target=<TARGET> <IMAGE>
  # $ docker container run -d --mount type=volume,source=html-volume,target=/usr/share/nginx/html nginx

  $ docker container run -d -v <VOLUME-NAME>:<TARGET> <IMAGE>

  $ docker container run -d --mount source=html-volume,target=/usr/share/nginx/html,readonly nginx
  #+END_SRC
** Dockerfile
- instructions on how to build an image
- Docker images consist of read-only layers
- each layer represents a Dockerfile instruction
- layers are stacked
- each layer creates an image
- each layer is a delta of changes from the previous layer
- images are built using ~docker image build~
*** Layers
- e.g
  #+BEGIN_SRC dockerfile
  FROM ubuntu:15.04
  COPY . /app
  RUN make /app
  CMD python /app/app.py
  #+END_SRC
  + FROM
    * creates a layer from the ubuntu:15.04 Docker image
  + COPY
    * adds files from your Docker client's current directory
  + RUN
    * builds your application with make
  + CMD
    * specifies what command to run within the container
**** Best Practices
- keep containers as ephemeral as possible
- follow principle 6 of the 12 factor app
- avoid including unnecessary file
- use ~.dockerignore~
- use multi-stage build
- don't install unnecessary packages
- decouple applications
- minimize the number of layers
- sort multi-line arguments
- leverage the build cache

*** instructions
- ~FROM~
  * initializes a new build stage and sets the Base Image
- ~RUN~
  * will execute any commands in a new layer
- ~CMD~
  * Provides a default for an executing container. There can only be
    one ~CMD~ instruction in a Dockerfile.
- ~LABEL~
  * Adds metadata to an image
- ~EXPOSE~
  * informs Docker that the container listens to the specified network
    ports at runtime
- ~ENV~
  * Sets the environment variable ~<key>~ to the value ~<value>~
- ~ADD~
  * Copies new files, directories, or remote file URLs from ~<src>~
    and adds them to the filesystem of the imagee ath the path
    ~<dest>~
- ~COPY~
  * Copies new files, directories from ~<src>~ and adds them to the
    filesystem of the imagee ath the path ~<dest>~
- ~ENTRYPOINT~
  * allows you to configure a container that will run as an executable
  * unlike ~CMD~, ENTRYPOINT can't be overridden at runtime
- ~VOLUME~:
  * creates a mount point with specified name and marks it as holding
    externally mounted volumes from the native host or other
    containers
*** build
    #+BEGIN_SRC bash
      docker image build -t <NAME>:<TAG> . # . because Dockerfile is in the
                                           # current dir, can also use -f to
                                           # a dockerfile
    #+END_SRC

- building an image by piping the Dockerfile through stdin
  #+BEGIN_SRC bash
  docker image build -t <NAME>:<TAG> -<<EOF
    build instructions
   EOF
  #+END_SRC
- using a url
  1. ~docker image build -t <NAME>:<TAG> <GIT_URL>#<REF>~
  2. ~docker image build -t <NAME>:<TAG> <GIT_URL>#:<DIRECTORY>~
  3. ~docker image build -t <NAME>:<TAG> <GIT_URL>#<REF>:<DIRECTORY>~
- using a tar file
  -  ~docker image build -t <NAME>:<TAG> - < file.tar~
**** multi-stage builds
- By default, the stages are not named
- Stages are integer numbers
- Starting with ~0~ for the first ~FROM~ instruction
- Name the stage by adding ~<NAME>~ to the ~FROM~ instruction
- Reference the stage name in the ~COPY~ instruction
- e.g
  #+BEGIN_SRC dockerfile
    FROM node AS build
    RUN mkdir -p /var/node
    ADD src/ /var/node/
    WORKDIR /var/node
    RUN npm install


    FROM node:alpine
    ARG VERSION=v1.1
    LABEL org.label-schema.version=$version
    ENV NODE_ENV="production"
    COPY --from=build /var/node /var/node
    WORKDIR /var/node
    EXPOSE 3000
    ENTRYPOINT ["./bin/www"]
  #+END_SRC

**** tag
- use ~docker image tag~ to create a new tagged image
  #+BEGIN_SRC
  docker image tag <SOURCE_IMAGE>:<TAG> <TARGET_IMAGE>:<TAG>
  #+END_SRC
- use commit sha
  #+BEGIN_SRC bash
  docker image build -t <NAME>:$(git log -1 --pretty=%H) .
  #+END_SRC
**** push to registry
- push
  #+BEGIN_SRC
  docker image push <USERNAME>:<IMAGE_NAME>:<TAG>
  #+END_SRC
  e.g.
  #+BEGIN_SRC
  # ~docker login~, username is fhdhsni

  root@ubuntu:~/play# docker image ls
  REPOSITORY          TAG                                        IMAGE ID            CREATED             SIZE
  play                03b1bc1b85d7da81b9769b3ca7ebe207f61146c3   f9e5fa5cced6        2 seconds ago       1.22MB

  root@ubuntu:~/play# docker image tag play:03b1bc1b85d7da81b9769b3ca7ebe207f61146c3 fhdhsni/play:foobar

  root@ubuntu:~/play# di ls
  REPOSITORY          TAG                                        IMAGE ID            CREATED             SIZE
  fhdhsni/play        foobar                                     f9e5fa5cced6        2 minutes ago       1.22MB
  play                03b1bc1b85d7da81b9769b3ca7ebe207f61146c3   f9e5fa5cced6        2 minutes ago       1.22MB

  root@ubuntu:~/play# docker image push fhdhsni/play:foobar
  The push refers to repository [docker.io/fhdhsni/play]
  1da8e4c8d307: Layer already exists
  foobar: digest: sha256:9eea61224e64d1282c30b5cb97cbf48984908066a3b5adb7014ecabf1a410e51 size: 527
  #+END_SRC

*** image history
- ~docker image history <IMG>~
- ~docker image history --no-trunc <IMG>~
- ~docker image history --quiet <IMG>~
- ~docker image history --quiet --no-trunc <IMG>~
- e.g.
  #+BEGIN_SRC
  root@ubuntu:~/play# cat Dockerfile
  FROM busybox
  ENTRYPOINT ["ls"]
  CMD ["/"]

  root@ubuntu:~/play# docker image ls
  REPOSITORY          TAG                                        IMAGE ID            CREATED             SIZE
  play                03b1bc1b85d7da81b9769b3ca7ebe207f61146c3   f9e5fa5cced6        23 minutes ago      1.22MB
  busybox             latest                                     020584afccce        12 days ago         1.22MB

  root@ubuntu:~/play# docker image history play:03b1bc1b85d7da81b9769b3ca7ebe207f61146c3
  IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
  f9e5fa5cced6        23 minutes ago      /bin/sh -c #(nop)  CMD ["/"]                    0B
  81d3a4f2840e        23 minutes ago      /bin/sh -c #(nop)  ENTRYPOINT ["ls"]            0B
  020584afccce        12 days ago         /bin/sh -c #(nop)  CMD ["sh"]                   0B
  <missing>           12 days ago         /bin/sh -c #(nop) ADD file:1141b81e5149cc37c…   1.22MB
  #+END_SRC
*** export image
- Save one or more images to a tar file
  + ~docker image save <IMAGE> > <FILE>.tar~
  + ~docker image save <IMAGE> -o <FILE>.tar~
  + ~docker image save <IMAGE> --output <FILE>.tar~

- Load an image from a tar file
  + ~docker image load < <FILE>.tar~
  + ~docker image load -i <FILE>.tar~
  + ~docker image load --input <FILE>.tar~

*** Environment Variable
- use the ~--env~ flag to pass an environment variable when starting
  a container:
  #+BEGIN_SRC
  docker container run --env PORT=3001 --env NODE_ENV=production ...
  #+END_SRC
- use the ~ENV~ instruction in the Dockerfile
  #+BEGIN_SRC
  ENV <KEY>=<VALUE>
  ENV <KEY> <VALUE>
  #+END_SRC
*** Build Arguments
- Use the ~--build-arg~ flag when building an image
  #+BEGIN_SRC
  --build-arg <NAME>=<VALUE>
  #+END_SRC
- use the ARG instruction in the Dockerfile
  #+BEGIN_SRC bash
  ARG <NAME>=<DEFAULT_VALUE>
  #+END_SRC
*** Non-privileged Users
- Dockerfile
  #+BEGIN_SRC
    FROM centos:latest
    RUN useradd -ms /bin/bash cloud_user
    USER cloud_user
  #+END_SRC
- use ~-u 0~ to run a container as root user when it has been set to a
  non-privileged user in the Dockerfile
*** VOLUME
- The ~VOLUME~ instruction creates a mount point with the specified name
  and marks it as holding externally mounted volumes from native host
  or other containers.
- e.g.
  #+BEGIN_SRC dockerfile
  FROM nginx:latest
  VOLUME ["/usr/share/nginx/html/"]
  #+END_SRC
*** ENTRYPOINT
- allows you to configure a container that will run as an executable
- overrides all elements specified using ~CMD~
- you can override the ~ENTRYPOINT~ instruction using the ~docker run
  --entrypoint~ flag

- append with ~CMD~
  #+BEGIN_SRC Dockerfile
  FROM busybox
  ENTRYPOINT ["ls"]
  CMD ["/"] # command gets appended to the end of ENTRYPOINT
  #+END_SRC
  1. ~docker image build -t play .~
  2. ~docker container run --rm play~
     * it runs ~ls /~
  3. ~docker container run --rm play /var~
     * it runs ~ls /var~
** processes
- ~docker container top <NAME>~
- ~docker container stats <NAME>~
** auto-restarting
- ~docker container run -d --name <NAME> --restart <RESTART> <IMAGE>~
- restart policy for a container, use the ~--restart~ flag
  + ~--restart no~
    * do not automatically restart the container
  + ~--restart on-failure~
    * restart the container if it exits due to an error, which
      manifests as a non-zero exit code
  + ~--restart always~
    * always restart the container if it stops
    * will restart after restarting the docker service
  + ~--restart unless-stopped~
    * Similar to always, except that when the container is stoppedd,
      it is not restarted even after the Docker daemon restarts
** docker events
- ~docker system events~
- ~docker system events --filter <FILTER-NAME>=<FILTER> --filter <FILTER-NAME>=<FILTER> ...~, e.g. - ~docker system events --filter type=container~

** Stopped Containers
- ~docker container ls -a -f status=exited~
** docker compose
- ~up~:
  + Create and start containers
- ~ps~:
  + List containers
- ~stop~:
  + Stop services
- ~start~:
  + Start services
- ~restart~:
  + Restart services
- ~down~:
  + Stop and remove containers, networks, images, and volumes
*** docker-compose.yml
- e.g 1
  #+BEGIN_SRC yaml
    version: '3'
    services:
      weather-app:
        container_name: weather1
      # dockerfile: prod.Dockerfile
      # image: registry.hamsaa.ir:4000/chat:latest
        build:
          context: .
          args:
            - VERSION=v2.0
        ports:
          - "8081:3000"
        environment:
          - NODE_ENV=production
  #+END_SRC
- e.g 2
  #+BEGIN_SRC yaml
    version: '3'
    services:
      ghost:
        container_name: ghost
        image: ghost:latest
        ports:
          - "80:2368"
        environment:
          - database__client=mysql
          - database__connection__host=mysql
          - database__connection__user=root
          - database__connection__password=pass
          - database__connection__database=ghost
        volumes:
          - ghost-volume:/var/lib/ghost
        networks:
          - ghost_network
          - mysql_network
        depends_on:
          - mysql
      mysql:
        container_name: mysql
        image: mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD=pass
        volumes:
          - mysql-volume:/var/lib/mysql
        networks:
          - mysql_network
    volumes:
      ghost-volume:
      mysql-volume:

    networks:
      ghost_network:
      mysql_network:
  #+END_SRC
- top level keys
  + ~version~
  + ~services~
  + ~networks~
  + ~volumes~
** docker swarm
- initialize the manager
  #+BEGIN_SRC
  docker swarm init --advertise-addr [PRIVATE_IP]
  #+END_SRC
- add the worker to the cluster
  #+BEGIN_SRC
  docker swarm join --token [TOKEN] [PRIVATE_IP]:2377
  #+END_SRC
- list the nodes in thee swarm
  #+BEGIN_SRC
  docker node ls
  #+END_SRC
- commands
  + ~docker node ls~
  + ~docker node inspect [NODE_NAME]~
  + ~docker node promote [NODE_NAME]~
    * promote a worker to a manager
  + ~docker node demote [NODE_NAME]~
    * demote a manager to a worker
  + ~docker node rm -f [NODE_NAME]~
  + ~docker swarm leave~
    * have a node leave the swarm
  + ~docker swarm join-token [woker|manager]~
  + ~docker swarm join --token [TOKEN] [PRIVATE_IP]:2377~
*** working with services
- commands
  + creating a service
     #+BEGIN_SRC
     docker service create -d --name [NAME] -p [HOST_PORT]:[CONTAINER_PORT] --replicas [REPLICAS] [IMAGE] [CMD]
     #+END_SRC
  + list services
    #+BEGIN_SRC
    docker service ls
    #+END_SRC
  + inspecting a service
    #+BEGIN_SRC
    docker service inspect [NAME]
    #+END_SRC
  + getting logs for a service
    #+BEGIN_SRC
    docker service logs [NAME]
    #+END_SRC
