Notes from  http://learnyouahaskell.com/

Beginning of joy <2018-05-24 Thu 15:01>

- In Haskell =*= and =+= and... are also function. We call them infix
  function (normal functions are prefix functions)

- Function application (calling a function by putting a space after it
  and then typing out the parameters) has the highest precedence

- If a function takes two parameters, we can also call it as an infix
  function by surrounding it with backticks. For instance, =div 10 2=
  becomes =10 `div` 2=

* Lists
- Strings are list.

- In Haskell, lists are a homogenous data structure.

- to append to a list =++= (heavy operation if list is larg). both
  operands should be list
  #+BEGIN_SRC haskell
  [1, 2, 3] ++ [4]
  #+END_SRC

- to the prepend to a list use cons operator, that is =:=, e.g
  #+BEGIN_SRC haskell
  'A':" SMALL CAT"  -- "A SMALL CAT"
  #+END_SRC

- =[1,2,3]= is actually just syntactic sugar for =1:2:3:[]=

- If you want to get an element out of a list by index, use =!!=

- The lists within a list can be of different lengths but they can't
  be of different types.

- =head=
- =tail=
- =last=
- =init= takes a list and returns everything except its last element.
  #+BEGIN_SRC
  ghci> init [5,4,3,2,1]
  [5,4,3,2]
  #+END_SRC
- =length=
- =null= checks if a list is empty. If it is, it returns True, otherwise it returns False
- =reverse=
- =take= takes a number and a list. It extracts that many elements from the beginning of the list
- =drop= works in a similar way, only it drops the number of elements from the beginning of a list.
  #+BEGIN_SRC
  ghci> drop 3 [8,4,2,1,5,6]
  [1,5,6]
  #+END_SRC
- =maximum=
- =minimum=
- =sum=
- =product= takes a list of numbers and returns their product.
  #+BEGIN_SRC
  ghci> product [6,2,1,2]
  24
  #+END_SRC
- =zip=
    #+BEGIN_SRC
    *Main> zip [1,3] [2, 4]
    [(1,2),(3,4)]
    *Main> zip [1,3] [2, 4, 5]
    [(1,2),(3,4)]
    #+END_SRC

- =elem= takes a thing and a list of things and tells us if that thing
  is an element of the list. It's usually called as an infix function
  because it's easier to read that way.
  #+BEGIN_SRC
  ghci> 4 `elem` [3,4,5,6]
  True
  ghci> 10 `elem` [3,4,5,6]
  False
  #+END_SRC

- ranges:
  =take 24 [13,26..]=

- =cycle= takes a list and cycles it into an *infinite* list
  #+BEGIN_SRC
  ghci> take 10 (cycle [1,2,3])
  [1,2,3,1,2,3,1,2,3,1]
  #+END_SRC
- =repeat= takes an element and produces an *infinite* list of just that element.
  #+BEGIN_SRC
  ghci> take 10 (repeat 5)
  [5,5,5,5,5,5,5,5,5,5]
  #+END_SRC
- =replicate=
  #+BEGIN_SRC
  ghci> replicate 3 5
  [5,5,5]
  #+END_SRC

- List comprehension
  +
         #+BEGIN_SRC
         ghci> [x*2 | x <- [1..10]]
         [2,4,6,8,10,12,14,16,18,20]
         #+END_SRC
  +
        #+BEGIN_SRC
         ghci> [ x | x <- [50..100], x `mod` 7 == 3]
         [52,59,66,73,80,87,94]
        #+END_SRC

  +
        a comprehension that replaces each odd number greater than 10
        with "BANG!" and each odd number that's less than 10 with
        "BOOM!". If a number isn't odd, we throw it out of our list.
        #+BEGIN_SRC
        boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]
        #+END_SRC

  +
         We can include several predicates. If we wanted all numbers from 10
         to 20 that are not 13, 15 or 19, we'd do:

           #+BEGIN_SRC
           ghci> [ x | x <- [10..20], x /= 13, x /= 15, x /= 19]
           [10,11,12,14,16,17,18,20]
           #+END_SRC
  + using multiple input list
      #+BEGIN_SRC
      ghci> [ x*y | x <- [2,5,10], y <- [8,10,11]]
      [16,20,22,40,50,55,80,100,110]
      #+END_SRC
  + when we don't care
      #+BEGIN_SRC
      length' xs = sum [1 | _ <- xs]
      #+END_SRC
  + Since strings are just lists
    #+BEGIN_SRC haskell
    removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]

    removeNonUppercase "Hahaha! Ahahaha!" -- "HA"
    #+END_SRC
  + List of lists
    Let's remove all odd numbers without flattening the list.
    #+BEGIN_SRC
    ghci> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]
    ghci> [ [ x | x <- xs, even x ] | xs <- xxs]
    [[2,2,4],[2,4,6,8],[2,4,2,6,2,6]]
    #+END_SRC

- Tuples
  + they don't have to be homogenous.
  + =fst= takes a pair and returns its first component.
    #+BEGIN_SRC
    ghci> fst (8,11)
    8
    #+END_SRC
  + =snd= takes a pair and returns its second component.
    #+BEGIN_SRC
    ghci> snd (8,11)
    11
    #+END_SRC
    Note: these functions operate only on pairs.
  + example:

    Which right triangle that has integers for all sides and
    all sides equal to or smaller than 10 has a perimeter of 24?

    #+BEGIN_SRC haskell
    rightTriangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2, a+b+c == 24]

    rightTriangles --  [(6,8,10)]
    #+END_SRC


- Types
  + The type of every expression is known at compile time.
  +

     #+BEGIN_SRC
     ghci> :t 'a'
     'a' :: Char
     #+END_SRC
     Here we see that doing :t on an expression prints out the
     expression followed by :: and its type. :: is read as "has type
     of". Explicit types are always denoted with the first letter in
     capital case. 'a', as it would seem, has a type of Char.
  + explicit type declaration.
    e.g. 1
    #+BEGIN_SRC
    removeNonUppercase :: [Char] -> [Char]
    removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]
    #+END_SRC
    e.g. 3
    #+BEGIN_SRC
    addThree :: Int -> Int -> Int -> Int
    addThree x y z = x + y + z
    #+END_SRC
  + =Int= stands for integer. It's used for whole numbers. 7 can be an
    Int but 7.2 cannot. Int is bounded, which means that it has a
    minimum and a maximum value. Usually on 32-bit machines the
    maximum possible Int is 2147483647 and the minimum is -2147483648.

  + =Integer= stands for, er â€¦ also integer. The main difference is
    that it's not bounded so it can be used to represent really
    really big numbers. I mean like really big. Int, however, is more
    efficient.
    #+BEGIN_SRC
    factorial :: Integer -> Integer
    factorial n = product [1..n]
    ghci> factorial 50
    30414093201713378043612608166064768844377641568960512000000000000
    #+END_SRC

  + =Float= is a real floating point with single precision.
    #+BEGIN_SRC
    circumference :: Float -> Float
    circumference r = 2 * pi * r
    ghci> circumference 4.0
    25.132742
    #+END_SRC


  + =Double= is a real floating point with double the precision!
    #+BEGIN_SRC
    circumference' :: Double -> Double
    circumference' r = 2 * pi * r
    ghci> circumference' 4.0
    25.132741228718345
    #+END_SRC

  + =Bool= is a boolean type. It can have only two values: True and
    False.

  + =Char= represents a character. It's denoted by single quotes. A
    list of characters is a string.
  + type variables
    #+BEGIN_SRC
    ghci> :t head
    head :: [a] -> a
    #+END_SRC
    What is this a? Is it a type? Remember that we previously stated
    that types are written in capital case, so it can't exactly be a
    type. Because it's not in capital case it's actually a type
    variable. That means that a can be of any type.
  + *typeclass*: A typeclass is a sort of interface that defines some
    behavior. If a type is a part of a typeclass, that means that it
    supports and implements the behavior the typeclass describes.
    #+BEGIN_SRC
    ghci> :t (==)
    (==) :: (Eq a) => a -> a -> Bool
    #+END_SRC
    Everything before the => symbol is called a class constraint. We
    can read the previous type declaration like this: the equality
    function takes any two values that are of the same type and
    returns a Bool. The type of those two values must be a member of
    the Eq class (this was the class constraint).
    - some basic typeclasses
      1) =Eq=: is used for types that support equality testing.
      2) =Ord=: is for types that have an ordering.

         The =compare= function takes two Ord members of the same type
         and returns an ordering. Ordering is a type that can be GT,
         LT or EQ, meaning greater than, lesser than and equal,
         respectively.
         #+BEGIN_SRC
         ghci> :t compare
         compare :: Ord a => a -> a -> Ordering
         ghci> 5 `compare` 3
         GT
         #+END_SRC
      3) =Show=: Members of =Show= can be presented as strings. The
         most used function that deals with the =Show= typeclass is
         =show=. It takes a value whose type is a member of Show and
         presents it to us as a string.
      4) =Read= is sort of the opposite typeclass of =Show=. The
         =read= function takes a string and returns a type which is a
         member of =Read=
         #+BEGIN_SRC
         ghci> read "True" || False
         True
         ghci> read "8.2" + 3.8
         12.0
         ghci> read "5" - 2
         3
         ghci> read "[1,2,3,4]" ++ [3]
         [1,2,3,4,3]
         #+END_SRC
      5) =Enum= members are sequentially ordered types. Types in this
         class: (), Bool, Char, Ordering, Int, Integer, Float and
         Double.

         #+BEGIN_SRC
         ghci> ['a'..'e']
         "abcde"
         ghci> [LT .. GT]
         [LT,EQ,GT]
         ghci> [3 .. 5]
         [3,4,5]
         ghci> succ 'B'
         'C'
         ghci> pred 'B'
         'A'
         #+END_SRC
      6) =Bounded= members have an upper and a lower bound.
         #+BEGIN_SRC
         ghci> minBound :: Int
         -2147483648
         ghci> maxBound :: Char
         '\1114111'
         ghci> maxBound :: Bool
         True
         ghci> minBound :: Bool
         False
         ghci> maxBound :: (Bool, Int, Char)
         (True,2147483647,'\1114111')
         #+END_SRC
      7) =Num= is a numeric typeclass. Its members have the property of
         being able to act like numbers. Let's examine the type of a
         number.
         #+BEGIN_SRC
         ghci> 20 :: Int
         20
         ghci> 20 :: Integer
         20
         ghci> 20 :: Float
         20.0
         ghci> 20 :: Double
         20.0
         ghci> :t (*)
         (*) :: (Num a) => a -> a -> a
         #+END_SRC
      8) =Integral= is also a numeric typeclass. =Num= includes all
         numbers, including real numbers and integral numbers,
         Integral includes only integral (whole) numbers.

      9) =Floating= includes only floating point numbers, so =Float= and
         =Double=.




    - explicit type annotations: are a way of explicitly saying what
      the type of an expression should be. We do that by adding =::= at
      the end of the expression and then specifying a type.
      #+BEGIN_SRC
      ghci> read "5" :: Int
      5
      ghci> read "5" :: Float
      5.0
      ghci> (read "5" :: Float) * 4
      20.0
      #+END_SRC
    - A very useful function for dealing with numbers is
      =fromIntegral=. It has a type declaration of:
      #+BEGIN_SRC
      ghci> :t fromIntegral
      fromIntegral :: (Num b, Integral a) => a -> b
      #+END_SRC
      From its type signature we see that it takes an integral number
      and turns it into a more general number. That's useful when you
      want integral and floating point types to work together
      nicely. For instance, the =length= function has a type declaration
      of =length :: [a] -> Int= instead of having a more general type of:
      #+BEGIN_SRC
      (Num b) => length :: [a] -> b.
      #+END_SRC
      If we try to get a length of a list and then add it to 3.2,
      we'll get an error because we tried to add together an Int and a
      floating point number. So to get around this, we do =fromIntegral=
      =(length [1,2,3,4]) + 3.2= and it all works out.

* pattern matching
e.g.1
#+BEGIN_SRC haskell
factorial :: (Integral a) => a -> a
factorial 0 = 1
factorial n = n * factorial (n - 1)
#+END_SRC

e.g.2
#+BEGIN_SRC haskell
first :: (a, b, c) -> a
first (x, _, _) = x

second :: (a, b, c) -> b
second (_, y, _) = y

third :: (a, b, c) -> c
third (_, _, z) = z
#+END_SRC

you can also pattern match in list comprehensions. Check this out:
e.g.3
#+BEGIN_SRC
ghci> let xs = [(1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]
ghci> [a+b | (a,b) <- xs]
[4,7,6,8,11,4]
#+END_SRC

e.g.4
#+BEGIN_SRC haskell
head' :: [a] -> a
head' [] = error "Can't call head on an empty list, dummy!"
head' (x:_) = x  -- note the parentheses
#+END_SRC

e.g.5
#+BEGIN_SRC
length' :: (Num b) => [a] -> b
length' [] = 0
length' (_:xs) = 1 + length' xs
#+END_SRC

e.g.6
#+BEGIN_SRC haskell
tell :: (Show a) => [a] -> String
tell [] = "The list is empty"
tell (x:[]) = "The list has one element: " ++ show x
tell (x:y:[]) = "The list has two elements: " ++ show x ++ " and " ++ show y
tell (x:y:_) = "This list is long. The first two elements are: " ++ show x ++ " and " ++ show y
#+END_SRC

** pattern
a handy way of breaking something up according to a pattern and
binding it to names whilst still keeping a reference to the whole
thing.
#+BEGIN_SRC
capital :: String -> String
capital "" = "Empty string, whoops!"
capital all@(x:xs) = "The first letter of " ++ all ++ " is " ++ [x]
#+END_SRC

** Guards
Note that there's no = right after the function name and its
parameters, before the first guard.

e.g.1
#+BEGIN_SRC haskell
bmiTell :: (RealFloat a) => a -> a -> String
bmiTell weight height
    | weight / height ^ 2 <= 18.5 = "You're underweight, you emo, you!"
    | weight / height ^ 2 <= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"
    | weight / height ^ 2 <= 30.0 = "You're fat! Lose some weight, fatty!"
    | otherwise                 = "You're a whale, congratulations!" -- otherwise is a keywoard, you can't say foo instead
#+END_SRC

Note: Not only can we call functions as infix with backticks, we can
also define them using backticks. Sometimes it's easier to read that
way.

e.g.2
#+BEGIN_SRC haskell
myCompare :: (Ord a) => a -> a -> Ordering
a `myCompare` b
    | a > b     = GT
    | a == b    = EQ
    | otherwise = LT
#+END_SRC

** where
=where= bindings are a *syntactic construct* (not expression) that let you bind to
variables at the end of a function and the whole function can see
them, including all the guards.

#+BEGIN_SRC haskell
bmiTell :: (RealFloat a) => a -> a -> String
bmiTell weight height
    | bmi <= skinny = "You're underweight, you emo, you!"
    | bmi <= normal = "You're supposedly normal. Pffft, I bet you're ugly!"
    | bmi <= fat    = "You're fat! Lose some weight, fatty!"
    | otherwise     = "You're a whale, congratulations!"
    where bmi = weight / height ^ 2
          (skinny, normal, fat) = (18.5, 25.0, 30.0)
#+END_SRC
or
#+BEGIN_SRC haskell
calcBmis :: (RealFloat a) => [(a, a)] -> [a]
calcBmis xs = [bmi w h | (w, h) <- xs]
    where bmi weight height = weight / height ^ 2
#+END_SRC

** let
#+BEGIN_SRC
let <bindings> in <expression>
#+END_SRC
=let= bindings let you bind to variables anywhere and are expressions
themselves, but are very local, so they don't span across guards. Just
like any construct in Haskell that is used to bind values to names,
let bindings can be used for pattern matching.

#+BEGIN_SRC haskell
cylinder :: (RealFloat a) => a -> a -> a
cylinder r h =
    let sideArea = 2 * pi * r * h
        topArea = pi * r ^2
    in  sideArea + 2 * topArea
#+END_SRC

=let= bindings are expressions themselves. =where= bindings are just
syntactic constructs.
#+BEGIN_SRC
ghci> 4 * (let a = 9 in a + 1) + 2
42

ghci> (let a = 100; b = 200; c = 300 in a*b*c, let foo="Hey "; bar = "there!" in foo ++ bar)
(6000000,"Hey there!")

ghci> (let (a,b,c) = (1,2,3) in a+b+c) * 100
600
#+END_SRC

*** let in list comprehensions
 You can also put =let= bindings inside list comprehensions.

 #+BEGIN_SRC haskell
 calcBmis :: (RealFloat a) => [(a, a)] -> [a]
 calcBmis xs = [bmi | (w, h) <- xs, let bmi = w / h ^ 2]
 #+END_SRC

 We include a =let= inside a list comprehension much like we would a
 predicate, only it doesn't filter the list, it only binds to
 names. The names defined in a let inside a list comprehension are
 visible to the output function (the part before the |) and all
 predicates and sections that come after of the binding. So we could
 make our function return only the BMIs of fat people:

 #+BEGIN_SRC
 calcBmis :: (RealFloat a) => [(a, a)] -> [a]
 calcBmis xs = [bmi | (w, h) <- xs, let bmi = w / h ^ 2, bmi >= 25.0]
 #+END_SRC

 We can't use the bmi name in the =(w, h) <- xs= part because it's
 defined prior to the let binding.

 We omitted the in part of the =let= binding when we used them in list
 comprehensions because the visibility of the names is already
 predefined there. However, we could use a =let= in binding in a
 predicate and the names defined would only be visible to that
 predicate.

** Case expressions
#+BEGIN_SRC
case expression of pattern -> result
                   pattern -> result
                   pattern -> result
                   ...
#+END_SRC

These two are equivalent
#+BEGIN_SRC haskell
head' :: [a] -> a
head' [] = error "No head for empty lists!"
head' (x:_) = x
#+END_SRC

#+BEGIN_SRC haskell
head' :: [a] -> a
head' xs = case xs of [] -> error "No head for empty lists!"
                      (x:_) -> x
#+END_SRC

example
#+BEGIN_SRC haskell
describeList :: [a] -> String
describeList xs = "The list is " ++ case xs of [] -> "empty."
                                               [x] -> "a singleton list."
                                               xs -> "a longer list."

#+END_SRC
is equivalent of
#+BEGIN_SRC haskell
describeList :: [a] -> String
describeList xs = "The list is " ++ what xs
    where what [] = "empty."
          what [x] = "a singleton list."
          what xs = "a longer list."
#+END_SRC
* recursion
#+BEGIN_SRC haskell
maximum' :: (Ord a) => [a] -> a
maximum' [] = error "maximum of empty list"
maximum' [x] = x
maximum' (x:xs)
    | x > maxTail = x
    | otherwise = maxTail
    where maxTail = maximum' xs
#+END_SRC
or yet better
#+BEGIN_SRC haskell
maximum' :: (Ord a) => [a] -> a
maximum' [] = error "maximum of empty list"
maximum' [x] = x
maximum' (x:xs) = max x (maximum' xs)
#+END_SRC

#+BEGIN_SRC haskell
replicate' :: (Num i, Ord i) => i -> a -> [a]
replicate' n x
    | n <= 0    = []
    | otherwise = x:replicate' (n-1) x
#+END_SRC
Note: =Num= is not a subclass of =Ord=. That means that what constitutes
for a number doesn't really have to adhere to an ordering. So that's
why we have to specify both the =Num= and =Ord= class constraints when
doing addition or subtraction and also comparison.

#+BEGIN_SRC haskell
take' :: (Num i, Ord i) => i -> [a] -> [a]
take' n _
    | n <= 0   = []
take' _ []     = []
take' n (x:xs) = x : take' (n-1) xs
#+END_SRC

#+BEGIN_SRC haskell
reverse' :: [a] -> [a]
reverse' [] = []
reverse' (x:xs) = reverse' xs ++ [x]
#+END_SRC

#+BEGIN_SRC haskell
repeat' :: a -> [a]
repeat' x = x:repeat' x
#+END_SRC

#+BEGIN_SRC haskell
zip' :: [a] -> [b] -> [(a,b)]
zip' _ [] = []
zip' [] _ = []
zip' (x:xs) (y:ys) = (x,y):zip' xs ys
#+END_SRC


#+BEGIN_SRC haskell
elem' :: (Eq a) => a -> [a] -> Bool
elem' a [] = False
elem' a (x:xs)
    | a == x    = True
    | otherwise = a `elem'` xs
#+END_SRC


#+BEGIN_SRC haskell
quicksort :: (Ord a) => [a] -> [a]
quicksort [] = []
quicksort (x:xs) =
    let smallerSorted = quicksort [a | a <- xs, a <= x]
        biggerSorted = quicksort [a | a <- xs, a > x]
    in  smallerSorted ++ [x] ++ biggerSorted
#+END_SRC
* HOF
** sections
Infix functions can also be partially applied by using sections. To
section an infix function, simply surround it with parentheses and
only supply a parameter on one side.

#+BEGIN_SRC haskell
divideByTen :: (Floating a) => a -> a
divideByTen = (/10)
#+END_SRC
Calling, say, =divideByTen 200= is equivalent to doing =200 / 10=, as
is doing =(/10) 200=

#+BEGIN_SRC haskell
isUpperAlphanum :: Char -> Bool
isUpperAlphanum = (`elem` ['A'..'Z'])
#+END_SRC
The only special thing about sections is using -. From the definition
of sections, (-4) would result in a function that takes a number and
subtracts 4 from it. However, for convenience, (-4) means minus
four. So if you want to make a function that subtracts 4 from the
number it gets as a parameter, partially apply the subtract function
like so: (subtract 4).

#+BEGIN_SRC haskell
hasNine :: (Foldable t, Eq a, Num a) => t a -> Bool
hasNine = (elem 9) -- same as hasNine = (9 `elem`)
hasNine [3,4] -- False
hasNine [3,4,9] -- True
#+END_SRC

#+BEGIN_SRC
ghci> f = (1:)
ghci> f [2]
[1,2]
#+END_SRC

#+BEGIN_SRC
ghci> f = (:[2])
ghci> f 1
[1,2]
#+END_SRC

** Some higher-orderism is in order

#+BEGIN_SRC haskell
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

applyTwice (3:) [1]  -- [3,3,1]
#+END_SRC

#+BEGIN_SRC haskell
zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith' _ [] _ = []
zipWith' _ _ [] = []
zipWith' f (x:xs) (y:ys) = f x y : zipWith' f xs ys
#+END_SRC

If the type declaration of a function says it accepts an =a -> b -> c=
function as a parameter, it will also accept an =a -> a -> a=

#+BEGIN_SRC haskell
flip' :: (a -> b -> c) -> b -> a -> c
flip' f y x = f x y
#+END_SRC

#+BEGIN_SRC
ghci> flip' zip [1,2,3,4,5] "hello"
[('h',1),('e',2),('l',3),('l',4),('o',5)]
ghci> zipWith (flip' div) [2,2..] [10,8,6,4,2]
[5,4,3,2,1]
#+END_SRC

#+BEGIN_SRC haskell
map :: (a -> b) -> [a] -> [b]
map _ [] = []
map f (x:xs) = f x : map f xs
#+END_SRC


#+BEGIN_SRC haskell
filter :: (a -> Bool) -> [a] -> [a]
filter _ [] = []
filter p (x:xs)
    | p x       = x : filter p xs
    | otherwise = filter p xs
#+END_SRC

#+BEGIN_SRC
ghci> filter (>3) [1,5,3,2,1,6,4,3,2,1]
[5,6,4]
ghci> filter (==3) [1,2,3,4,5]
[3]
ghci> filter even [1..10]
[2,4,6,8,10]
ghci> let notNull x = not (null x) in filter notNull [[1,2,3],[],[3,4,5],[2,2],[],[],[]]
[[1,2,3],[3,4,5],[2,2]]
ghci> filter (`elem` ['a'..'z']) "u LaUgH aT mE BeCaUsE I aM diFfeRent"
"uagameasadifeent"
ghci> filter (`elem` ['A'..'Z']) "i lauGh At You BecAuse u r aLL the Same"
"GAYBALLS"
#+END_SRC
* Microsoft Channel 9: Dr. Erik Meijer
** Lazy
#+BEGIN_SRC haskell
Prelude> head []
   Exception: Prelude.head: empty list

Prelude> f x = 42

Prelude> f 8
42

Prelude> f (head []) -- doesn't evaluate head []
42
#+END_SRC
We can think: =head []= is =âŠ¥= ([[https://en.wikipedia.org/wiki/Bottom_type][the bottom value]]), and =f âŠ¥= is 42

** lambda
#+BEGIN_SRC haskell
--
-- Int -> Int
-- \x -> x + x
--
add x y = x + y
add x = \y -> x + y
add = \x -> \y -> x + y
--
const :: a -> b -> a
const x _ = x
const :: a -> (b -> a)
const x = \_ -> x
--
odds n = map f [0..n-1]
         where
           f x = x*2 + 1

odds n = map (\x -> x*2 + 1)  [0..n-1]
#+END_SRC
** sections
#+BEGIN_SRC
Î»> 1+3
4

Î»> (+) 1 3
4

Î»> succ' = (+) 1
Î»> succ' 8
9

Î»> succ'' = (1 +)
Î»> succ'' 8
9
#+END_SRC
