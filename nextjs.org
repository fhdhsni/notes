* getInitialProps
- For the initial page load, ~getInitialProps~ will execute on the
  server only. ~getInitialProps~ will only be executed on the client
  when navigating to a different route via the ~Link~ component or using
  the routing APIs.
- Note: ~getInitialProps~ can not be used in children components. Only
  in pages.

- ~getInitialProps~ receives a context object with the following
  properties:
  + ~pathname~ - path section of URL
  + ~query~ - query string section of URL parsed as an object
  + ~asPath~ - ~String~ of the actual path (including the query) shows
    in the browser
  + ~req~ - HTTP request object (server only)
  + ~res~ - HTTP response object (server only)
  + ~err~ - Error object if any error is encountered during the
    rendering

* Link
- Client-side transitions between routes can be enabled via a ~<Link>~ component.
- ~<Link>~ component has two main props:
  + ~href~: the path inside ~pages~ directory + query string.
  + ~as~: the path that will be rendered in the browser URL bar.
- custom routing
  1. Consider you have the URL ~/post/:slug~.
  2. You created the pages/post.js
     #+BEGIN_SRC javascript
       class Post extends React.Component {
         static async getInitialProps({ query }) {
           console.log('SLUG', query.slug);
           return {};
         }
         render() {
           return <h1>My blog post</h1>;
         }
       }

       export default Post;
     #+END_SRC
  3. You add the route to express (or any other server) on ~server.js~
     file (this is only for SSR). This will route the url ~/post/:slug~
     to ~pages/post.js~ and provide ~slug~ as part of query in
     ~getInitialProps~.
     #+BEGIN_SRC javascript
     server.get('/post/:slug', (req, res) => {
       return app.render(req, res, '/post', { slug: req.params.slug });
     });
     #+END_SRC
  4. For client side routing, use next/link:
     #+BEGIN_SRC javascript
     <Link href="/post?slug=something" as="/post/something">
     #+END_SRC
- Client-side routing behaves exactly like the browser:
  1. The component is fetched
  2. If it defines ~getInitialProps~, data is fetched. If an error
     occurs, ~_error.js~ is rendered
  3. After 1 and 2 complete, ~pushState~ is performed and the new
     component is rendered

- To inject the ~pathname~, ~query~ or ~asPath~ in your component, you can
  use ~withRouter~.

* With URL object
- The component ~<Link>~ can also receive a URL object and it will
  automatically format it to create the URL string.
  #+BEGIN_SRC javascript
    // pages/index.js
    import Link from 'next/link';

    function Home() {
      return (
        <div>
          Click{' '}
          <Link href={{ pathname: '/about', query: { name: 'Zeit' } }}>
            <a>here</a>
          </Link>{' '}
          to read more
        </div>
      );
    }

    export default Home;
  #+END_SRC
  That will generate the URL string ~/about?name=Zeit~, you can use
  every property as defined in the [[https://nodejs.org/api/url.html#url_url_strings_and_url_objects][Node.js URL module documentation]].

* Intercepting ~popstate~
- In some cases (for example, if using a [[https://nextjs.org/docs#custom-server-and-routing][custom router]]), you may wish
  to listen to popstate and react before the router acts on it. For
  example, you could use this to manipulate the request, or force an
  SSR refresh.

  #+BEGIN_SRC javascript
    import Router from 'next/router';

    Router.beforePopState(({ url, as, options }) => {
      // I only want to allow these two routes!
      if (as !== '/' || as !== '/other') {
        // Have SSR render bad routes as a 404.
        window.location.href = as;
        return false;
      }

      return true;
    });
  #+END_SRC

* Router Events
- You can also listen to different events happening inside the
  Router. Here's a list of supported events:

~routeChangeStart(url)~ - Fires when a route starts to change
~routeChangeComplete(url)~ - Fires when a route changed completely
~routeChangeError(err, url)~ - Fires when there's an error when changing routes
~beforeHistoryChange(url)~ - Fires just before changing the browser's history
~hashChangeStart(url)~ - Fires when the hash will change but not the page
~hashChangeComplete(url)~ - Fires when the hash has changed but not the page

- Here ~url~ is the URL shown in the browser. If you call
  ~Router.push(url, as)~ (or similar), then the value of ~url~ will be ~as~.

- Here's how to properly listen to the router event ~routeChangeStart~:
  #+BEGIN_SRC javascript
    const handleRouteChange = url => {
      console.log('App is changing to: ', url);
    };

    Router.events.on('routeChangeStart', handleRouteChange);
  #+END_SRC
  If you no longer want to listen to that event, you can unsubscribe
  with the off method:
  #+BEGIN_SRC javascript
  Router.events.off('routeChangeStart', handleRouteChange);
  #+END_SRC

* Shallow Routing
- Shallow routing allows you to change the URL without running
  ~getInitialProps~. You'll receive the updated ~pathname~ and the ~query~
  via the router prop (injected using ~withRouter~), without losing
  state.

- You can do this by invoking either ~Router.push~ or ~Router.replace~
  with the ~shallow: true~ option. Here's an example:
  #+BEGIN_SRC javascript
    // Current URL is "/"
    const href = '/?counter=10';
    const as = href;
    Router.push(href, as, { shallow: true });
  #+END_SRC
  Now, the URL is updated to ~/?counter=10~. You can see the updated URL
  with ~this.props.router.query~ inside the ~Component~ (make sure you are
  using ~withRouter~ around your Component to inject the router prop).

- You can watch for URL changes via ~componentDidUpdate~ hook as shown
  below:
  #+BEGIN_SRC javascript
    componentDidUpdate(prevProps) {
      const { pathname, query } = this.props.router
      // verify props have changed to avoid an infinite loop
      if (query.id !== prevProps.router.query.id) {
        // fetch data based on the new query
      }
    }
  #+END_SRC

- NOTES:
  - Shallow routing works *only* for same page URL changes. For an
    example, let's assume we have another page called about, and you
    run this:
    #+BEGIN_SRC javascript
    Router.push('/?counter=10', '/about?counter=10', { shallow: true });
    #+END_SRC
    Since that's a new page, it'll unload the current page, load the
    new one and call ~getInitialProps~ even though we asked to do
    shallow routing.

- The router object injected by ~withRouter~ comes with an API similar
  to ~next/router~.


* Prefetching Pages
- with ~Link~
  #+BEGIN_SRC javascript
     <Link prefetch href="/about">
       <a>About</a>
     </Link>
  #+END_SRC
- Imperatively
  #+BEGIN_SRC javascript
    import { withRouter } from 'next/router';

    function MyLink({ router }) {
      return (
        <div>
          <a onClick={() => setTimeout(() => router.push('/dynamic'), 100)}>
            A route transition will happen after 100ms
          </a>
          {// but we can prefetch it!
          router.prefetch('/dynamic')}
        </div>
      );
    }

    export default withRouter(MyLink);
  #+END_SRC
  + The router instance should be only used inside the client side of
    your app though. In order to prevent any error regarding this
    subject, when rendering the ~Router~ on the server side, use the
    imperatively prefetch method in the ~componentDidMount()~ lifecycle
    method.
    #+BEGIN_SRC javascript
      import React from 'react';
      import { withRouter } from 'next/router';

      class MyLink extends React.Component {
        componentDidMount() {
          const { router } = this.props;
          router.prefetch('/dynamic');
        }

        render() {
          const { router } = this.props;

          return (
            <div>
              <a onClick={() => setTimeout(() => router.push('/dynamic'), 100)}>
                A route transition will happen after 100ms
              </a>
            </div>
          );
        }
      }

      export default withRouter(MyLink);
    #+END_SRC

* Custom server and routing

- This example makes ~/a~ resolve to ~./pages/b~, and ~/b~ resolve to
  ~./pages/a~:
  #+BEGIN_SRC javascript
    // This file doesn't go through babel or webpack transformation.
    // Make sure the syntax and sources this file requires are compatible with the current node version you are running
    // See https://github.com/zeit/next.js/issues/1245 for discussions on Universal Webpack or universal Babel
    const { createServer } = require('http');
    const { parse } = require('url');
    const next = require('next');

    const dev = process.env.NODE_ENV !== 'production';
    const app = next({ dev });
    const handle = app.getRequestHandler();

    app.prepare().then(() => {
      createServer((req, res) => {
        // Be sure to pass `true` as the second argument to `url.parse`.
        // This tells it to parse the query portion of the URL.
        const parsedUrl = parse(req.url, true);
        const { pathname, query } = parsedUrl;

        if (pathname === '/a') {
          app.render(req, res, '/b', query);
        } else if (pathname === '/b') {
          app.render(req, res, '/a', query);
        } else {
          handle(req, res, parsedUrl);
        }
      }).listen(3000, err => {
        if (err) throw err;
        console.log('> Ready on http://localhost:3000');
      });
    });
  #+END_SRC


* Dynamic Import
  #+BEGIN_SRC javascript
    import dynamic from 'next/dynamic';

    const DynamicComponent = dynamic(() => import('../components/hello'));

    function Home() {
      return (
        <div>
          <Header />
          <DynamicComponent />
          <p>HOME PAGE is here!</p>
        </div>
      );
    }

    export default Home;
  #+END_SRC
** With named exports
   #+BEGIN_SRC javascript
     // components/hello.js
     export function Hello() {
       return <p>Hello!</p>;
     }
   #+END_SRC

   #+BEGIN_SRC javascript
     import dynamic from 'next/dynamic';

     const DynamicComponent = dynamic(() =>
       import('../components/hello').then(mod => mod.Hello)
     );

     function Home() {
       return (
         <div>
           <Header />
           <DynamicComponent />
           <p>HOME PAGE is here!</p>
         </div>
       );
     }

     export default Home;
   #+END_SRC
** With Custom Loading Component
   #+BEGIN_SRC javascript
     import dynamic from 'next/dynamic';

     const DynamicComponentWithCustomLoading = dynamic(
       () => import('../components/hello2'),
       {
         loading: () => <p>...</p>
       }
     );

     function Home() {
       return (
         <div>
           <Header />
           <DynamicComponentWithCustomLoading />
           <p>HOME PAGE is here!</p>
         </div>
       );
     }

     export default Home;
   #+END_SRC
** With No SSR
   #+BEGIN_SRC javascript
     import dynamic from 'next/dynamic';

     const DynamicComponentWithNoSSR = dynamic(
       () => import('../components/hello3'),
       {
         ssr: false
       }
     );

     function Home() {
       return (
         <div>
           <Header />
           <DynamicComponentWithNoSSR />
           <p>HOME PAGE is here!</p>
         </div>
       );
     }

     export default Home;
   #+END_SRC
** import dynamic from 'next/dynamic';
   #+BEGIN_SRC javascript
     const HelloBundle = dynamic({
       modules: () => {
         const components = {
           Hello1: () => import('../components/hello1'),
           Hello2: () => import('../components/hello2')
         };

         return components;
       },
       render: (props, { Hello1, Hello2 }) => (
         <div>
           <h1>{props.title}</h1>
           <Hello1 />
           <Hello2 />
         </div>
       )
     });

     function DynamicBundle() {
       return <HelloBundle title="Dynamic Bundle" />;
     }

     export default DynamicBundle;
   #+END_SRC

* Custom <App>
- Next.js uses the ~App~ component to initialize pages. You can override
  it and control the page initialization. Which allows you to do
  amazing things like:
  - Persisting layout between page changes
  - Keeping state when navigating pages
  - Custom error handling using componentDidCatch
  - Inject additional data into pages (for example by processing
    GraphQL queries)
- e.g.
  #+BEGIN_SRC javascript
  import React from 'react';
    import App, { Container } from 'next/app';

    class MyApp extends App {
      static async getInitialProps({ Component, ctx }) {
        let pageProps = {};

        if (Component.getInitialProps) {
          pageProps = await Component.getInitialProps(ctx);
        }

        return { pageProps };
      }

      render() {
        const { Component, pageProps } = this.props;

        return (
          <Container>
            <Component {...pageProps} />
          </Container>
        );
      }
    }

    export default MyApp;
  #+END_SRC

* Custom <Document>
- Is rendered on the server side
- Is used to change the initial server side rendered document markup
- Commonly used to implement server side rendering for css-in-js
  libraries like styled-components or emotion. styled-jsx is included
  with Next.js by default.
- e.g.
  #+BEGIN_SRC javascript
    // _document is only rendered on the server side and not on the client side
    // Event handlers like onClick can't be added to this file

    // ./pages/_document.js
    import Document, { Html, Head, Main, NextScript } from 'next/document';

    class MyDocument extends Document {
      static async getInitialProps(ctx) {
        const initialProps = await Document.getInitialProps(ctx);
        return { ...initialProps };
      }

      render() {
        return (
          <Html>
            <Head>
              <style>{`body { margin: 0 } /* custom! */`}</style>
            </Head>
            <body className="custom_class">
              <Main />
              <NextScript />
            </body>
          </Html>
        );
      }
    }

    export default MyDocument;
  #+END_SRC
  - All of ~<Head />~, ~<Main />~ and ~<NextScript />~ are required
    for page to be properly rendered.
  - Note: React-components outside of ~<Main />~ will not be initialised
    by the browser. Do not add application logic here. If you need
    shared components in all your pages (like a menu or a toolbar),
    take a look at the App component instead.
  - The ~ctx~ object is equivalent to the one received in all
    ~getInitialProps~ hooks, with one addition:
    + ~renderPage~ (Function) a callback that executes the actual React
      rendering logic (synchronously). It's useful to decorate this
      function in order to support server-rendering wrappers like
      Aphrodite's renderStatic
** Customizing ~renderPage~
- It should be noted that the only reason you should be customizing
  ~renderPage~ is for usage with css-in-js libraries that need to wrap
  the application to properly work with server-rendering.
  + It takes as argument an options object for further customization
    #+BEGIN_SRC javascript
      import Document from 'next/document';

      class MyDocument extends Document {
        static async getInitialProps(ctx) {
          const originalRenderPage = ctx.renderPage;

          ctx.renderPage = () =>
            originalRenderPage({
              // useful for wrapping the whole react tree
              enhanceApp: App => App,
              // useful for wrapping in a per-page basis
              enhanceComponent: Component => Component
            });

          // Run the parent `getInitialProps` using `ctx` that now includes our custom `renderPage`
          const initialProps = await Document.getInitialProps(ctx);

          return initialProps;
        }
      }

      export default MyDocument;
    #+END_SRC

* Custom error handling
- 404 or 500 errors are handled both client and server side by a
  default component ~error.js~. If you wish to override it, define a
  ~_error.js~ in the pages folder:

- The ~pages/_error.js~ component is only used in production. In
  development you get an error with call stack to know where the error
  originated from.

- e.g.
  #+BEGIN_SRC javascript
    import React from 'react';

    class Error extends React.Component {
      static getInitialProps({ res, err }) {
        const statusCode = res ? res.statusCode : err ? err.statusCode : null;
        return { statusCode };
      }

      render() {
        return (
          <p>
            {this.props.statusCode
              ? `An error ${this.props.statusCode} occurred on server`
              : 'An error occurred on client'}
          </p>
        );
      }
    }

    export default Error;
  #+END_SRC
** Reusing the built-in error page
- If you want to render the built-in error page you can by using
  ~next/error~:
  #+BEGIN_SRC javascript
    import React from 'react';
    import Error from 'next/error';
    import fetch from 'isomorphic-unfetch';

    class Page extends React.Component {
      static async getInitialProps() {
        const res = await fetch('https://api.github.com/repos/zeit/next.js');
        const errorCode = res.statusCode > 200 ? res.statusCode : false;
        const json = await res.json();

        return { errorCode, stars: json.stargazers_count };
      }

      render() {
        if (this.props.errorCode) {
          return <Error statusCode={this.props.errorCode} />;
        }

        return <div>Next stars: {this.props.stars}</div>;
      }
    }

    export default Page;
  #+END_SRC

* Custom configuration
** Customizing webpack config
- Warning: The ~webpack~ function is executed twice, once for the server
  and once for the client. This allows you to distinguish between
  client and server configuration using the ~isServer~ property
- Example usage of defaultLoaders.babel:
  #+BEGIN_SRC javascript
    // Example next.config.js for adding a loader that depends on babel-loader
    // This source was taken from the @zeit/next-mdx plugin source:
    // https://github.com/zeit/next-plugins/blob/master/packages/next-mdx
    module.exports = {
      webpack: (config, options) => {
        config.module.rules.push({
          test: /\.mdx/,
          use: [
            options.defaultLoaders.babel,
            {
              loader: '@mdx-js/loader',
              options: pluginOptions.options
            }
          ]
        });

        return config;
      }
    };
  #+END_SRC

** Customizing babel config
- In order to extend our usage of ~babel~, you can simply define a
  ~.babelrc~ file at the root of your app. This file is optional.
- If found, we're going to consider it the source of truth, therefore
  it needs to define what next needs as well, which is the ~next/babel~
  preset.
- Here's an example ~.babelrc~ file:
  #+BEGIN_SRC javascript
    {
      "presets": ["next/babel"],
      "plugins": []
    }
  #+END_SRC
- The next/babel preset includes everything needed to transpile React
  applications. This includes:
  + preset-env
  + preset-react
  + plugin-proposal-class-properties
  + plugin-proposal-object-rest-spread
  + plugin-transform-runtime

- These presets / plugins should not be added to your custom
  ~.babelrc~. Instead, you can configure them on the ~next/babel~ preset:
  #+BEGIN_SRC javascript
    {
      "presets": [
        [
          "next/babel",
          {
            "preset-env": {},
            "transform-runtime": {},
            "styled-jsx": {},
            "class-properties": {}
          }
        ]
      ],
      "plugins": []
    }
  #+END_SRC
  + The modules option on ~"preset-env"~ should be kept to false
    otherwise webpack code splitting is disabled.

* Exposing configuration to the server / client side

** Build time configuration
- The way build-time configuration works is by inlining the provided
  values into the Javascript bundle.

  You can add the ~env~ key in ~next.config.js~:
  #+BEGIN_SRC javascript

    // next.config.js
    module.exports = {
      env: {
        customKey: 'value'
      }
    };
  #+END_SRC
  This will allow you to use ~process.env.customKey~ in your code. For
  example:

  #+BEGIN_SRC javascript
  // pages/index.js
    function Index() {
      return <h1>The value of customKey is: {process.env.customKey}</h1>;
    }

    export default Index;
  #+END_SRC
** Runtime configuration
- Generally you want to use build-time configuration to provide your
  configuration. The reason for this is that runtime configuration
  adds a small rendering / initialization overhead.

- The ~next/config~ module gives your app access to the
  ~publicRuntimeConfig~ and ~serverRuntimeConfig~ stored in your
  ~next.config.js~.

- Place any server-only runtime config under a ~serverRuntimeConfig~
  property
- Anything accessible to both client and server-side code should be
  under ~publicRuntimeConfig~.
- e.g.
  #+BEGIN_SRC javascript
    // next.config.js
    module.exports = {
      serverRuntimeConfig: {
        // Will only be available on the server side
        mySecret: 'secret',
        secondSecret: process.env.SECOND_SECRET // Pass through env variables
      },
      publicRuntimeConfig: {
        // Will be available on both server and client
        staticFolder: '/static'
      }
    };
  #+END_SRC
  and to use 'em
  #+BEGIN_SRC javascript
    // pages/index.js
    import getConfig from 'next/config';
    // Only holds serverRuntimeConfig and publicRuntimeConfig from next.config.js nothing else.
    const { serverRuntimeConfig, publicRuntimeConfig } = getConfig();

    console.log(serverRuntimeConfig.mySecret); // Will only be available on the server side
    console.log(publicRuntimeConfig.staticFolder); // Will be available on both server and client

    function MyImage() {
      return (
        <div>
          <img src={`${publicRuntimeConfig.staticFolder}/logo.png`} alt="logo" />
        </div>
      );
    }

    export default MyImage;
  #+END_SRC
